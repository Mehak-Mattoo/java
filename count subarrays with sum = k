import java.util.* ;
import java.io.*; 
public class Solution {
    public static int findAllSubarraysWithGivenSum(int arr[], int s) {
        int count=0;

   for (int i = 0; i < arr.length; i++) {
     int sum=0;
   for (int j = i; j < arr.length; j++) {
                                            
sum+= arr[j];
        if(sum==s){
         count++;
         }} 
}





HashMap<Integer,Integer>mpp= new HashMap<>();
int sum=0;


int n = arr.length; // size of the given array.
        
        int preSum = 0, cnt = 0;

        mpp.put(0, 1); // Setting 0 in the map.
        for (int i = 0; i < n; i++) {
            // add current element to prefix Sum:
            preSum += arr[i];

            // Calculate x-k:
            int remove = preSum - s;

            // Add the number of subarrays to be removed:
            cnt += mpp.getOrDefault(remove, 0);

            // Update the count of prefix sum
            // in the map.
            mpp.put(preSum, mpp.getOrDefault(preSum, 0) + 1);
        }
        return cnt;




        // sliding window

int start=0, sum=0;

for (int i = 0; i < arr.length; i++) {
    sum+= arr[i];

if(sum>s){
while(sum>s){

sum-= arr[start];
start++;}}

if(sum==s){
    count++;


}

}return count;





    }
}
