import java.util.*;

class Pair {
    int first;
    int second;

    public Pair(int first, int second) {
        this.first = first;
        this.second = second;
    }
}

public class Graph {
    public static boolean isCycle(int v, List<List<Integer>> adjacency) {
        int[] vis = new int[v];

        for (int i = 0; i < v; i++) {
            if (vis[i] == 0) {
                if (bfs(i, vis, adjacency)) {
                    return true;
                }
            }
        }
        return false;
    }

    public static boolean bfs(int source, int[] vis, List<List<Integer>> adjacency) {
        vis[source] = 1;

        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(source, -1));

        while (!q.isEmpty()) {
            int curr = q.peek().first;// curr node
            int parent = q.peek().second; // it parent
            q.poll();

            for (int neighbour : adjacency.get(curr)) {
                if (vis[neighbour] == 0) {
                    vis[neighbour] = 1;
                    q.offer(new Pair(neighbour, curr));
                } else if (parent != neighbour) { // if the curr node did not come from its parent, then there is a  cycle
                    return true;
                }
            }
        }
        return false;
    }
}
