package com.java.MyProject;



public class AllocateBooks {
public static void main(String[] args) {
	
	int arr[]= {10,5,20};
	int k=2;  // number of students
	
System.out.println(	AllocateBooks(arr,k));
}

static int Sum(int arr[]) { // returns the sum of all of the elements for min
	
	int sum=0;
	for (int i = 0; i < arr.length; i++) {
		
	sum+= arr[i];} 
	
	return sum;  }
	


static int Max(int arr[]) {  // return max element for max
	
int i = 0;	
int max= arr[i];
	
	for ( i = 0; i < arr.length; i++) {
		if(max < arr[i]) {
			max= arr[i];}}
	
		
	return max;}



private static int AllocateBooks(int[] arr, int k) {
	
	int min= Max(arr);
	int max= Sum(arr);
	int ans=0;
	
	
	while(min<= max) {  // if min becomes larger than max, then there is no range to get the answer
		
	int mid= (min+max)/2;	
	if(isPossibleSolution(arr, ans,k)) {// check if it is a possible solution (always get the min number)
		max= mid-1;  //  if yes, the shorten the range
		ans= mid;}  // and  store the ans
		
	else {
		min= mid+1; }}  // otherwise, if no possible solution was found, then increase min
	
	
	return ans;}
	


private static boolean isPossibleSolution(int arr[],int ans, int k) {
	
	int student =0; // no .of student
	int sum=0;
	
	for (int i = 0; i < arr.length; i++) {
		sum+= arr[i];
		if(sum>ans) {  // if the number of pages is smaller than ans, then we can give
			student++ ;} // pages to  other student too
		 
		
		else {            // if becomes larger, 
			sum+=arr[i];}
	
	
	if(student<=k) {  // if no of student become equal or smaller, then it is a possible solution
		return true;}}
	
	return false; }

}
