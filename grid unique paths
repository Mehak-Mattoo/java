class Solution {
    public int uniquePaths(int m, int n) {

        int[][] dp = new int[m + 1][n + 1]; // initialize a dp arr with -1 as default

        for (int i = 0; i <= m; i++) {
    for (int j = 0; j <= n; j++) {
        dp[i][j] = -1;
    }}
 int num=countPaths(0,0,m,n,dp);


  if(m==1&&n==1){
return num;}

  return Math.abs(dp[0][0]); // always return the absolute value

    }

    public static int countPaths(int i, int j, int n, int m , int [][]dp){
        if(i==(n-1) || j==(m-1) ){  return 1;} // if we reach that element
         if(i>=n||j>=m) {return 0;}// if we out of bounds
         if(dp[i][j]!=-1){ return dp[i][j];}// if we have already visited that element , just return the value present there

 else return dp[i][j] = countPaths(i+1,j,n,m, dp)+countPaths(i,j+1,n,m, dp);
    }
}
