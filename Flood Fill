class Solution {
    int[][] dirs = {{1,0}, {0,1},{-1,0},{0,-1}};
    class Point{
      int x;
      int y;
      public Point(int x, int y){
        this.x = x;
        this.y = y;
      }
    }
    public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {
        int m = image.length;
        int n = image[0].length;
        int old = image[sr][sc];
        if (old == newColor) return image;
            
        Queue<Point> q = new LinkedList<>();
        q.offer(new Point(sr, sc));
        
        while (!q.isEmpty()){
            Point p = q.poll();
            image[p.x][p.y] = newColor;
            for(int[] d: dirs){
                int x = p.x + d[0];
                int y = p.y + d[1];
                if (isValid(image, x, y, m,n, old)) q.offer(new Point(x,y));              
            }
        }
        return image;    
    }
    
    public boolean isValid(int[][] image, int i, int j, int m, int n, int color){
        return i >=0 && i < m && j >= 0 && j < n && image[i][j] == color;
    }
}
