class Solution {
    public boolean exist(char[][] board, String word) {

        int n = board.length, m = board[0].length;

        int[][] vis = new int[n][m];

        char start = word.charAt(0);

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (board[i][j] == start) {// first find where the starting character is
                    if (dfs(0, i, j, word, board, vis)) {
                        return true;
                    }
                }

            }
        }

        return false;

    }

    public static boolean dfs(int i, int r, int c, String word, char[][] board, int[][] vis) {

        int n = board.length;
        int m = board[0].length;

        if (i == word.length()) {
            return true;
        }

        if (r < 0 || c < 0 || r >= n || c >= m || vis[r][c] == 1 || board[r][c] != word.charAt(i)) {
            return false;
        }

        vis[r][c] = 1;

        boolean found = dfs(i + 1, r + 1, c, word, board, vis) || dfs(i + 1, r - 1, c, word, board, vis)
            || dfs(i + 1, r, c + 1, word, board, vis) || dfs(i + 1, r, c - 1, word, board, vis);


        vis[r][c] = 0; // bactrack

        return found;

    }

}
