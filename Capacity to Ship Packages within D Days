class Solution {
    public int shipWithinDays(int[] weights, int days) {
        int n= weights.length, sum=0, min= Integer.MIN_VALUE;
        
        for(int i=0; i<n; i++){
            sum += weights[i];
            min = Math.max(min, weights[i]);  }


        for(int i=min; i<= sum; i++){ 

            if(FindDays(weights, i)<= days){
                return i;  }      } 

return -1;  }


    public static int FindDays(int [] weights, int capacity){

 int n= weights.length;
 int currDays=1,load=0;

            for(int j=0; j<n; j++){ 
              
                if(load+ weights[j]> capacity){
                    currDays+=1;
                    load= weights[j];  }

                 else{
                    load+= weights[j];  }  }  

     return currDays; }                      
    
}






class Solution {
    public int shipWithinDays(int[] weights, int days) {
        int n= weights.length, sum=0, min= Integer.MIN_VALUE;
        
        for(int i=0; i<n; i++){
            sum += weights[i];  // max range== sum of all packages
            min = Math.max(min, weights[i]);  } // max element of arr == min capacity


            int low= min, high= sum;

            while(low<=high){

            int mid= (low+high) /2;
            int currDay= FindDays(weights, mid);

                if( currDay<= days ){
                       high= mid-1; }

                else{
                     low= mid+1;    } }


return low;  }


    public static int FindDays(int [] weights, int capacity){

 int n= weights.length;
 int currDays=1,load=0;

            for(int j=0; j<n; j++){ 
              
                if(load+ weights[j]> capacity){ // if load becomes heavier 
                    currDays+=1; // then load it on other day
                    load= weights[j];  }

                 else{
                    load+= weights[j];  }  } //else sum up the load

     return currDays; }   //return how many days it will take to deliver all packages                   
    
}
