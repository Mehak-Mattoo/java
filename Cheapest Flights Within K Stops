class Solution {

    static class Pair {
        int first; // flight
        int second; //price

        public Pair(int first, int second) {
            this.first = first;
            this.second = second;
        }
    }

    static class Tuple {
        int first, second, third;

        Tuple(int first, int second, int third) {
            this.first = first; //stops
            this.second = second; // src
            this.third = third;//price
        }
    }

    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {

        List<List<Pair>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) { //make the graph
            adj.add(new ArrayList<>());
        }

        int m = flights.length;
        for (int i = 0; i < m; i++) {
            adj.get(flights[i][0]).add(new Pair(flights[i][1], flights[i][2]));
        }

        Queue<Tuple> q = new LinkedList<>();
        q.add(new Tuple(0, src, 0));

        int[] dist = new int[n];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0;

        while (!q.isEmpty()) {
            Tuple it = q.peek();
            q.remove();
            int stops = it.first;
            int node = it.second;
            int price = it.third;

            if (stops > k) { // even if stops become greater , we could still get a better answer
                continue;
            }

            for (Pair neighbour : adj.get(node)) {
                int nextFlight = neighbour.first;
                int nextFlightPrice = neighbour.second;

                if (price + nextFlightPrice < dist[nextFlight] && stops <= k) {
                    dist[nextFlight] = price + nextFlightPrice;
                    q.add(new Tuple(stops + 1, nextFlight, price + nextFlightPrice)); 
                                                                                
                }
            }
        }
        return dist[dst] == Integer.MAX_VALUE ? -1 : dist[dst];
    }
}
