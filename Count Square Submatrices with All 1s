class Solution {
    public int countSquares(int[][] matrix) {

        int n = matrix.length;
        int m = matrix[0].length;
        int[][] dp = new int[n][m];
        int totalSquares = 0;

        // Initialize the dp matrix based on the first row and first column of the input matrix
        for (int i = 0; i < n; i++) {
            dp[i][0] = matrix[i][0];
            totalSquares += dp[i][0];
        }

        for (int j = 0; j < m; j++) {
            dp[0][j] = matrix[0][j];
            if (j > 0) {
                totalSquares += dp[0][j];
            }
        }

        // Fill the rest of the dp matrix
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < m; j++) {
                if (matrix[i][j] == 1) { // for a new square to form-> its upper row, upper left diagonal and left == 1
                    dp[i][j] = 1 + Math.min(dp[i - 1][j], Math.min(dp[i - 1][j - 1], dp[i][j - 1])); //+1-> itself would be a square
                    totalSquares += dp[i][j];
                } else {
                    dp[i][j] = 0;
                }
            }
        }

        return totalSquares;
    }
}
