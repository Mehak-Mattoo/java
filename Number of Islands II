import java.util.*;

class DisjointSet {

    List<Integer> parent = new ArrayList<>();
    List<Integer> size = new ArrayList<>();

    public DisjointSet(int n) {
        for (int i = 0; i <= n; i++) {
            parent.add(i);
            size.add(1);
        }
    }

    public int findParent(int node) {
        if (node == parent.get(node)) {
            return node;
        }
        int ultimateP = findParent(parent.get(node)); // recursively find parent until ultimate is found
        parent.set(node, ultimateP); // path compression
        return parent.get(node); // return ultimate parent
    }

    public void unionBySize(int u, int v) {
        int UltimateofU = findParent(u);
        int UltimateofV = findParent(v);

        if (UltimateofU == UltimateofV) { // when ultimate parent is same , they are already connected
            return;
        }

        if (size.get(UltimateofU) < size.get(UltimateofV)) {
            parent.set(UltimateofU, UltimateofV);
            size.set(UltimateofV, size.get(UltimateofV) + size.get(UltimateofU));
        } else {
            parent.set(UltimateofV, UltimateofU);
            size.set(UltimateofU, size.get(UltimateofU) + size.get(UltimateofV));
        }

    }
}

public class Solution {
    public static int[] numberOfIslandII(int n, int m, int[][] queries, int q) {

        DisjointSet ds = new DisjointSet(n * m);
        int[][] vis = new int[n][m];
        int[] ans = new int[q];

        int x[] = { 0, 0, -1, 1 };
        int y[] = { -1, 1, 0, 0 };

        int islands = 0;

        for (int i = 0; i < q; i++) {
            int row = queries[i][0];
            int col = queries[i][1];

            if (vis[row][col] == 1) { // when a island is found
                ans[i] = islands; // store count
                continue;
            }

            vis[row][col] = 1; 
            islands++;

            for (int j = 0; j < 4; j++) {
                int nrow = row + x[j];
                int ncol = col + y[j];

                if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && vis[nrow][ncol] == 1) { // when a island is seen
                    int nodeNum = (row * m) + col; // to get row & col in serial number 1-n
                    int adjNodeNum = (nrow * m) + ncol;

                    if (ds.findParent(nodeNum) != ds.findParent(adjNodeNum)) {// if they have dissimilar parents ,
                        islands--; //as two islands are to be connected--> bring fown the island count
                        ds.unionBySize(nodeNum, adjNodeNum);// they can be joined together
                    }
                }
            }

            ans[i] = islands;

        }

        return ans;
    }
}
