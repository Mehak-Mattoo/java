package com.java.MyProject;

class BSTNode{
	
	BSTNode left;
	BSTNode right;                            // making a pre - requisite node class
	int data;
	
	public BSTNode(int data) {
		this.data = data; }}


class Check{
	
	BSTNode root;
	
boolean IsBST() {
		
return IsBst(root, Integer.MIN_VALUE, Integer.MAX_VALUE);} // first setting the range for root node to be -infinity and + infinity
	
	
boolean IsBst(BSTNode root, int min, int max) {
		
		if (root == null) {  // even a null tree is a bst
			return true;}
		
		if(root.data<= min|| root.data>= max) { // if the data does not reside b/w min & max, then it is not a bst
			return false;}
		
	boolean left=	IsBst(root.left, min, root.data);  // checking left subtree and setting the max to root's data to make a range
	
	if(left== true) {  // if left comes out to be true, only then check right side
		boolean right = IsBst(root.right, root.data, max);  // checking right subtree and setting the min to root's data
		return right; }   // return right value
		
	return false;	}}


	public class CheckIfATreeIsBST{
	public static void main(String[] args) {
		
		Check c= new Check();
		
		c.root = new BSTNode(4);
		c.root.left = new BSTNode(9);
		c.root.right = new BSTNode(5);
		c.root.left.left = new BSTNode(1);
		c.root.left.right = new BSTNode(3);
		
	if(c.IsBST()) {
		System.out.println("The input tree is a BST. ");
	}else {
		System.out.println("The input tree is not a BST. ");	}
		
		
	}

}
