import java.util.*;

public class Solution {
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {
        int dp[][] = new int[n][maxWeight + 1];
        return helper(n-1, n, weight, value, maxWeight, dp);
    }

    public static int helper(int i, int n, int weight[], int value[], int maxWeight, int[][] dp) {
      
      if(i==0){
          if(weight[0]<=maxWeight){
              return value[0];
          }
          else{
              return 0;
          }
      }

      if(dp[i][maxWeight]!=0){
          return dp[i][maxWeight];
      }

      int notTake= helper(i-1, n, weight, value, maxWeight, dp);

      int take= Integer.MIN_VALUE;


        if (weight[i] <= maxWeight) {
             take = value[i]+ helper(i - 1, n, weight, value, maxWeight - weight[i], dp);
          
        }

           return dp[i][maxWeight]= Math.max(notTake, take);
     
    }
}




import java.util.*;

public class Solution {
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {
        int dp[][] = new int[n][maxWeight + 1];

        for(int i=weight[0]; i<=maxWeight;i++){
            dp[0][i]= value[0];
        }

        for (int i = 1; i < n; i++) {
           for (int j = 0; j <= maxWeight; j++) {

               int notTake= dp[i-1][j];

               int take= Integer.MIN_VALUE;

               if(weight[i]<= j){
                   take= dp[i-1][j-weight[i]]+ value[i];
               }
               dp[i][j]=  Math.max(take, notTake);
               
           } }

           return dp[n-1][maxWeight];
        }
   
}




import java.util.*;

public class Solution {
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {
        int prev[] = new int[maxWeight + 1];

        for (int i = weight[0]; i <= maxWeight; i++) {
            prev[i] = value[0];
        }

        for (int i = 1; i < n; i++) {
            int curr[] = new int[maxWeight + 1];
            for (int j = 0; j <= maxWeight; j++) {
                int notTake = prev[j];
                int take = Integer.MIN_VALUE;
                if (weight[i] <= j) {
                    take = prev[j - weight[i]] + value[i];
                }
                curr[j] = Math.max(take, notTake);
            }
            prev = curr; // Update prev after updating curr for the current item
        }

        return prev[maxWeight]; // Return the value at maxWeight, not maxWeight - 1
    }
}
