public class Solution {
    public static int minimizeCost(int n, int k, int []height){

        return helper(n-1, k, height);
        
    }

    public static int helper(int index ,int k, int []height){

        if(index==0){
            return 0;
        }

        int min= Integer.MAX_VALUE; 

        for (int j = 1; j <=k; j++) {
           if(index-j>=0){
               int jump= helper(index-j, k, height)+ Math.abs(height[index]- height[index-j]);

               min= Math.min(min, jump);
           }}

           return min;

    }
}







public class Solution {
    public static int minimizeCost(int n, int k, int[] height) {
        int dp[] = new int[n];

        dp[0] = 0;


for (int i = 1; i <n; i++) {

       int min = Integer.MAX_VALUE;

        for (int j = 1; j <= k; j++) {
            if (i - j >= 0) {
                int jump = dp[i - j] + Math.abs(height[i] - height[i - j]);

                min = Math.min(min, jump);
            }
        }

        dp[i] = min; 
}
        return dp[n-1]; 
    }
}
