class Solution {
    public int smallestDivisor(int[] nums, int threshold) {

        int n= nums.length, max= Integer.MIN_VALUE;

        for(int i=0; i<n; i++){
            max= Math.max(max, nums[i]);}

    for(int i=1; i<=max; i++){
        int sum=0;
            
        for(int j=0; j<n; j++){
       
        sum+=(int) Math.ceil((double)nums[j]/ i); }

        if(sum<=threshold){
            return i; }}
           
    return -1;    
        
    }
}

class Solution {
    public int smallestDivisor(int[] nums, int threshold) {

        int n= nums.length, max= Integer.MIN_VALUE;

        for(int i=0; i<n; i++){
            max= Math.max(max, nums[i]);}

        int high= max, low= 1, sum=0;    

        while(low<=high){

        int mid= (low+high)/2;

        sum= isPossible(nums, mid); 

        if(sum<=threshold){        
        high= mid-1; }

        else{
            low= mid+1; } }
           
    return low;    
        
    }


    public static int isPossible(int []nums, int divisor){
         int n= nums.length,  sum=0;

        for(int i=0; i<n; i++){
       
       sum+=(int) Math.ceil((double)nums[i]/ divisor);  }

        return sum;}
}

