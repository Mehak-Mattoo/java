class Solution {
    public int numDistinct(String s, String t) {

        int dp[][] = new int[s.length() + 1][t.length() + 1];
        return helper(s, t, s.length(), t.length(), dp);
    }

    private int helper(String s, String t, int m, int n, int dp[][]) {

        if (n == 0) {
            return 1;
        }

        if (m == 0) {
            return 0;
        }

        if (dp[m][n] != 0) {
            return dp[m][n];
        }

        if (s.charAt(m-1) == t.charAt(n-1)) {
            return dp[m][n] = helper(s, t, m - 1, n - 1, dp) + helper(s, t, m - 1, n, dp);
        }
        // skip the current character of s.
        return dp[m][n]=  helper(s, t, m - 1, n, dp);

    }
}




class Solution {
    public int numDistinct(String s, String t) {

        int n = s.length(), m = t.length();

        int dp[][] = new int[n + 1][m + 1];

         for (int i = 0; i <= n; i++) {
            dp[i][0] = 1;
        }

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (s.charAt(i - 1) == t.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];
                }

                else {
                    dp[i][j] = dp[i - 1][j];
                }

            }
        }

        return dp[n][m];

    }
}




class Solution {
    public int numDistinct(String s, String t) {
        int n = s.length(), m = t.length();

        int[] prev = new int[m + 1];
        prev[0] = 1; // Base case: empty string t matches with empty string s

        for (int i = 1; i <= n; i++) {
            int[] curr = new int[m + 1];
            curr[0] = 1; // Base case: empty string t matches with any non-empty prefix of s
            for (int j = 1; j <= m; j++) {
                if (s.charAt(i - 1) == t.charAt(j - 1)) {
                    curr[j] = prev[j - 1] + prev[j ]; // Characters match, add diagonal element
                } else {
                    curr[j] = prev[j ]; // Characters don't match, carry over previous count
                }
            }
            prev = curr; // Update prev to curr for the next iteration
        }

        return prev[m]; // Return the count of distinct subsequences of t in s
    }
}
