import java.util.*;

public class Solution {
    public static int[] findMedian(int[] arr, int n) {
        int[] ans = new int[n];
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());

        for (int i = 0; i < n; i++) {
            addNumber(arr[i], minHeap, maxHeap);
            rebalance(minHeap, maxHeap);
            ans[i] = findMedian(minHeap, maxHeap);
        }
        return ans;
    }

    private static void addNumber(int num, PriorityQueue<Integer> minHeap, PriorityQueue<Integer> maxHeap) {
        if (maxHeap.isEmpty() || num <= maxHeap.peek()) { // max heap will always contain greater size than min heap
            maxHeap.offer(num);
        } else {
            minHeap.offer(num);
        }
    }

    private static void rebalance(PriorityQueue<Integer> minHeap, PriorityQueue<Integer> maxHeap) {
         if (maxHeap.size() > minHeap.size() + 1) {// if there are too many elements in maxheap, poll them into min heap
        minHeap.offer(maxHeap.poll());   
         }else if (minHeap.size() > maxHeap.size()) {// condition violated to keep maxheap larger
            maxHeap.offer(minHeap.poll());
        
        }
    }

    private static int findMedian(PriorityQueue<Integer> minHeap, PriorityQueue<Integer> maxHeap) {
        if (maxHeap.size() == minHeap.size()) { // even number upto now, get the avg.
            return (maxHeap.peek() + minHeap.peek()) / 2;
        } else { // odd number upto now
            return maxHeap.peek();
        }
    }
}
