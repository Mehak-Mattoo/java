class Solution {
    private int timer = 1;

    private void dfs(int node, int parent, int[] vis, ArrayList<ArrayList<Integer>> adj, int tin[], int low[],
            List<List<Integer>> bridges) {
        vis[node] = 1;
        tin[node] = low[node] = timer;
        timer++;
        for (Integer it : adj.get(node)) {
            if (it == parent) { // Skip if the adjacent node is the parent
                continue;
            }
            if (vis[it] == 0) { // If adjacent node is not yet visited, DFS on the adjacent node
                dfs(it, node, vis, adj, tin, low, bridges);
                low[node] = Math.min(low[node], low[it]);

                // a bridge can be formed
                if (low[it] > tin[node]) {
                    bridges.add(Arrays.asList(it, node));
                }
            } else {
                low[node] = Math.min(low[node], low[it]);/* If adjacent node can be discovered early than the current node, 
            than update the minimum discovery time of current node as well */
            }
        }
    }

    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {

        ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>();
        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<Integer>());
        }

        for (List<Integer> it : connections) {
            int u = it.get(0);
            int v = it.get(1);
            adj.get(u).add(v);
            adj.get(v).add(u);
        }
        int[] vis = new int[n];
        int[] tin = new int[n];
        int[] low = new int[n];
        List<List<Integer>> bridges = new ArrayList<>();

        // DFS from 0th node, since there is no parent, set parent to -1.
        dfs(0, -1, vis, adj, tin, low, bridges);
        return bridges;
    }
}
