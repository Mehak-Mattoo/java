/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
     
    int len= levelOrder(root);

        return len;

    }

     public int levelOrder(TreeNode root) {
        List<List<Integer>> list = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<TreeNode>(); // using queue becasue of fifo approach

        if (root == null) {
            return 0;
        }
        queue.offer(root);

        while (!queue.isEmpty()) {
            int size= queue.size();
            List<Integer> inside = new ArrayList<>();

  for(int i=0; i<size; i++){

            TreeNode curr = queue.poll();
            inside.add(curr.val);

            if (curr.left != null) {
                queue.offer(curr.left);

            }

            if (curr.right != null) {
                queue.offer(curr.right);

            }}
            list.add(inside);

        }

        return list.size();

    }

}
