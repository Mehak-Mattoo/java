/**
 * Definition for singly-linked list.
 * class ListNode {
 * int val;
 * ListNode next;
 * ListNode(int x) {
 * val = x;
 * next = null;
 * }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {

        HashSet<ListNode> set = new HashSet<>();
        ListNode slow = head, fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;

            if (fast == slow) {

                slow = head;
                while (slow != fast) {
                    slow = slow.next;
                    fast = fast.next;

                }
                return fast;
            }

        }

        return null;

    }
}




public class Solution {
    public ListNode detectCycle(ListNode head) {

        HashSet<ListNode> set= new HashSet<>();

        while(head!=null){
            if(!set.contains(head)){
                set.add(head);

            }
            else{
                return head;
            }
            head= head.next;
            
        }

        return null;
        
    }
}
