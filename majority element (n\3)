class Solution {
    public List<Integer> majorityElement(int[] nums) {
      List<Integer> ans = new ArrayList<>();

        Arrays.sort(nums);
        int count=0;
 
        for(int i=0; i<nums.length; i++){
            count=0;

             if (ans.size() == 0 || ans.get(0) != nums[i]) {
            for(int j=0; j<nums.length; j++){
            if(nums[i]== nums[j]){
                count++;

            }
        } if(count>nums.length/3){
                ans.add(nums[i]);
            }
             }
           if (ans.size() == 2) break;          
        }
        return ans;
    }
}


// using map


class Solution {
    public List<Integer> majorityElement(int[] nums) {
      List<Integer> ans = new ArrayList<>();

  Map<Integer, Integer> map = new HashMap<>();

for(int i=0; i<nums.length; i++){
    map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
}

 for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            int element = entry.getKey();
            int count = entry.getValue();

 if(count>nums.length/3){
     ans.add(element);
 }}
        return ans;
    }}

//boyer voting algo


class Solution {
    public List<Integer> majorityElement(int[] nums) {
      List<Integer> ans = new ArrayList<>();

 int count1=0, count2=0, el1=0, el2=0;

 for (int i = 0; i < nums.length; i++) {

 if(count1==0 && nums[i]!= el2){
     count1=1;
     el1= nums[i];
 }
  else if(count2==0 && nums[i]!= el1){
     count2=1;
     el2= nums[i];
 }

 else if (el1== nums[i]){
count1++;
 }

  else if (el2== nums[i]){
count2++;
 }
   else {
    count1--;
    count2--;
            } }
 count1 = 0;
count2 = 0;

  for (int i = 0; i < nums.length; i++) {
            if (el1 == nums[i]) {
                count1++;
            } else if (el2 == nums[i]) {
                count2++;
            }
        }
if (count1 > nums.length / 3) {
            ans.add(el1);
        }
        if (count2 > nums.length / 3) {
            ans.add(el2);
        }
        return ans;
    }
}
