import java.util.* ;
import java.io.*; 
public class Solution {
	public static Stack<Integer> sortStack(Stack<Integer> s) {
		Stack<Integer> stack = new Stack<>();


while(!s.isEmpty()){
	int curr= s.pop();

	while(!stack.isEmpty() && stack.peek()> curr){ // if sorted stack top> curr element
		int big= stack.pop(); // push the bigger number back into original stack
		s.push(big);
	}
	
	stack.push(curr);

}
	return stack;
	}
}




import java.util.* ;
import java.io.*; 
public class Solution {
	public static Stack<Integer> sortStack(Stack<Integer> s) {

		 if (s.isEmpty()) {
            return s; // Return an empty stack if s is empty
        }

		int top= s.pop();

		sortStack(s);
		helper(s, top);

return s;

}

public static  void helper(Stack<Integer> s, int top){

if(s.isEmpty() || s.peek() <=top){
	s.push(top);
	return ;
}

int curr=s.pop();

	 helper(s, top); 
	 s.push(curr);


}
}

