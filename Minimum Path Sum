class Solution {
    public int minPathSum(int[][] grid) {
        
        int n = grid.length, m = grid[0].length;

        int[][] dp = new int[n][m];

        return helper(n - 1, m - 1, grid, dp);
    }

    public static int helper(int r, int c, int[][] grid, int[][] dp) {
        if (r == 0 && c == 0) {
            return grid[0][0];
        }
        if (r < 0 || c < 0) {
            return  (int) Math.pow(10, 9);
        }
        if (dp[r][c] != 0) {
            return dp[r][c];
        }
        int a = grid[r][c] + helper(r - 1, c, grid, dp);
        int b = grid[r][c] + helper(r, c - 1, grid, dp);

        return dp[r][c] = Math.min(a, b);
    }
}




class Solution {
    public int minPathSum(int[][] grid) {

        int n = grid.length, m = grid[0].length;

        int[][] dp = new int[n][m];

        dp[0][0] = grid[0][0];

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (i == 0 && j == 0) {
                    continue;
                }

                else {

                    int right = 0, down = 0;

                    if (i > 0) {
                        right += dp[i - 1][j];
                    }

                    else {
                        right += (int) Math.pow(10, 9);
                    }
                    if (j > 0) {
                        down += dp[i][j - 1];

                    } else {
                        down += (int) Math.pow(10, 9);
                    }

                    dp[i][j] = grid[i][j] + Math.min(right, down);
                }

            }
        }

        return dp[n - 1][m - 1];
    }
}




class Solution {
    public int minPathSum(int[][] grid) {

        int n = grid.length, m = grid[0].length;

        int[] prev = new int[m];

        for (int i = 0; i < n; i++) {

            int[] temp = new int[m];

            for (int j = 0; j < m; j++) {
                if (i == 0 && j == 0) {
                    temp[j] = grid[i][j];
                }

                else {

                    int right = grid[i][j] , down =  grid[i][j];

                    if (i > 0) {
                        right += prev[j];
                    }

                    else {
                        right += (int) Math.pow(10, 9);
                    }

                    if (j > 0) {
                        down += temp[j - 1] ;

                    } else {
                        down += (int) Math.pow(10, 9);
                    }

                    temp[j] = Math.min(down, right);

                }
            }
            prev = temp;

        }

        return prev[m - 1];
    }
}
