
class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int m=matrix.length;
        int n=matrix[0].length;

        int mini=(int)1e8;

        int dp[][]=new int[m+1][n+1];
        
      
        
        for(int i=0;i<n;i++)
        {
            mini=Math.min(mini,solve(matrix,0,i,dp));
        }
        
        return mini;
    }
    int solve(int[][] matrix,int row,int col,int[][] dp)
    {
        //base case
        if(col<0 || col>=matrix[0].length)
        {
            return (int)1e8;
        }
        if(row==matrix.length-1)
        {
            return matrix[row][col];
        }
        
        
        if(dp[row][col]!=0){
            return dp[row][col];}
        
        
        //row+1,col-1
        int sum1=matrix[row][col]+solve(matrix,row+1,col-1,dp);
        
        //row+1,col
        int sum2=matrix[row][col]+solve(matrix,row+1,col,dp);
        
        //row+1,col+1
        int sum3=matrix[row][col]+solve(matrix,row+1,col+1,dp);
        
        
        return dp[row][col]=Math.min(sum1,Math.min(sum2,sum3));
        
    }
}




class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;

        int dp[][] = new int[m][n];

        for (int i = 0; i < n; i++) {
            dp[0][i] = matrix[0][i];
        }

        for (int i = 1; i < m; i++) {
            for (int j = 0; j < n; j++) { 

                int b = Integer.MAX_VALUE, c = Integer.MAX_VALUE; // Initialize b and c with MAX_VALUE

                if (j - 1 >= 0) { // Check if j - 1 is within bounds
                    b = matrix[i][j] + dp[i - 1][j - 1]; 
                }

                int a = matrix[i][j] + dp[i - 1][j]; 

                if (j + 1 < n) { // Check if j + 1 is within bounds
                    c = matrix[i][j] + dp[i - 1][j + 1]; 
                }

                dp[i][j] = Math.min(a, Math.min(b, c));

            }
        }

        int min = Integer.MAX_VALUE;
        for (int j = 0; j < n; j++) { 
            min = Math.min(min, dp[m - 1][j]);
        }

        return min;

    }
}




class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;

        int prev[] = new int[m];

        for (int i = 0; i < n; i++) {
            prev[i] = matrix[0][i];
        }

        for (int i = 1; i < m; i++) {
            int[] curr = new int[m];
            for (int j = 0; j < n; j++) {

                int a = Integer.MAX_VALUE, c = Integer.MAX_VALUE;

                if (j - 1 >= 0) {
                 a = matrix[i][j] + prev[j - 1];
                   
                }
                int  b = matrix[i][j] + prev[j];

                
                if (j + 1 < n) {
                    c = matrix[i][j] + prev[j + 1];
                }

                curr[j] = Math.min(a, Math.min(b, c));

            }

            prev = curr;
        }

        int min = Integer.MAX_VALUE;

        for (int j = 0; j < n; j++) {
            min = Math.min(min, prev[j]);
        }

        return min;

    }
}
