class Solution {

    class Pair {
        int r;
        int c;
        int time;

        public Pair(int r,
                int c,
                int time) {

            this.r = r;
            this.c = c;
            this.time = time;

        }
    }

    public int orangesRotting(int[][] grid) {

        Queue<Pair> q = new LinkedList<>();

        int n = grid.length, m = grid[0].length;

        if (n == 0 || grid == null) {
            return 0;
        }

        int vis[][] = new int[n][m];

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 2) {
                    q.add(new Pair(i, j, 0));
                    vis[i][j] = 2;
                }
            }
        }

        int time=0;

        int x[] = { -1, 0, +1, 0 }; // movement of elements
        int y[] = { 0, +1, 0, -1 };

        while (!q.isEmpty()) {
            Pair curr = q.poll();
            int r = curr.r;
            int c = curr.c;
            int t = curr.time;

time=Math.max(time, t);

            for (int i = 0; i < 4; i++) {
                int nrow = r + x[i];
                int ncol = c + y[i];

                if (nrow >= 0 && ncol >= 0 && nrow < n && ncol < m && vis[nrow][ncol] == 0 && grid[nrow][ncol] == 1) { // Changed '||' to '&&'
                    q.add(new Pair(nrow, ncol, t + 1));
                    vis[nrow][ncol] = 2;
                }

            }
        }

        // Check for any fresh oranges left
            for (int i = 0; i < n; i++) { 
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1 && vis[i][j] != 2) {
                    return -1;
                }
            }
        }


        return time;
    }
}
