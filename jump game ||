class Solution {
    public int jump(int[] nums) {

        int n = nums.length, jumps =0 , coverage = 0, lastJumpIndex=0 ; // coverage-- how far you can make a jump
// lastjump index== last index of max coverage
        if (n <= 1) {
            return 0;
        }

        for (int i = 0; i <n ; i++) {

            coverage = Math.max(coverage, i+ nums[i]); // figuring out the max distance you can go

            if(i== lastJumpIndex){  // we have explored all the index of coverage
                lastJumpIndex= coverage; // update lastjumpindex to last of coverage
                jumps++; // after exploring max we can jump, we have to jump now
            
            
            if(coverage>= n-1){ // we have reached last index
                return jumps;
            }}}

        
        return jumps;

    }
}
