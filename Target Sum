class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        return helper(nums, 0, target, new HashMap<>());
    }

    public int helper(int[] nums, int index, int target, Map<String, Integer> memo) {
        if (index == nums.length) {
            if (target == 0) {
                return 1;
            }
            return 0;
        }

        String key = index + "," + target;
        if (memo.containsKey(key)) {
            return memo.get(key);
        }

        int countWithCurr = helper(nums, index + 1, target - nums[index], memo);
        int countWithoutCurr = helper(nums, index + 1, target + nums[index], memo);

        int totalWays = countWithCurr + countWithoutCurr;
        memo.put(key, totalWays);
        return totalWays;
    }
}




class Solution {
    public int findTargetSumWays(int[] nums, int target) {

return countPartitions(nums.length, target, nums);
    }

      public static int countPartitions(int n, int d, int[] arr) {

    int sum = 0;
    for(int i=0; i<arr.length;i++){
        sum += arr[i];
	}

    if(sum-d<0|| (sum-d)%2==1) {
		return 0;}

    
    int s2 = (sum-d)/2;
    
    int dp[][] = new int[n][s2+1];
    
    return helper(n-1,s2,arr,dp);

    }

	static int helper(int ind, int target,int[] arr, int[][] dp){

     if(ind == 0){
        if(target==0 && arr[0]==0){ // when target does become 0, and o index also has 0,
            return 2;}  	// there can be 2 ways to make target ==0
        if(target==0 || target == arr[0]){  
            return 1;}

        return 0;
    }
    
    if(dp[ind][target]!=0){
        return dp[ind][target];}
        
    int notTaken = helper(ind-1,target,arr,dp);
    
    int taken = 0;
    if(arr[ind]<=target){
        taken = helper(ind-1,target-arr[ind],arr,dp);}
        
    return dp[ind][target]= (notTaken + taken);
}

}
