
class Solution {
    // Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(List<Integer> val, List<Integer> wt, int capacity) {
        // code here
        
          int n = val.size();

      // Create an array of items with {value, weight, ratio}
        List<double[]> items = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            double value = val.get(i);
            double weight = wt.get(i);
            double ratio = value / weight;
            items.add(new double[]{value, weight, ratio});
        }

       
        items.sort((a, b) -> Double.compare(b[2], a[2]));
            double profit = 0.000000;
        int currCapacity= capacity;
        
       for (double[] item : items) {
            double value = item[0];
            double weight = item[1];

            if (weight <= currCapacity) {
                // Take full item
                profit += value;
                currCapacity -= weight;
            } else {
                // Take fraction of item
                profit += (value / weight) * currCapacity;
                break; // knapsack is full
            }
        }
        
        return profit;
    }
}
