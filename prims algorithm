import java.util.ArrayList;
import java.util.PriorityQueue;

public class Solution {
  static class Pair {
    int node;
    int distance;
    public Pair(int distance, int node) {

        this.node = node;
        this.distance = distance;
    }
}

    public static int minimumSpanningTree(ArrayList<ArrayList<Integer>> edges, int V) {

        ArrayList<ArrayList<Pair>> adj=new ArrayList<>();


        for(int i=0;i<V;i++){
            adj.add(new ArrayList<>());
        }

        for(int i=0;i<edges.size();i++){
            int u=edges.get(i).get(0);
            int v=edges.get(i).get(1);
            int wt=edges.get(i).get(2);

            adj.get(u).add(new Pair(wt,v));
            adj.get(v).add(new Pair(wt,u));

        }

        PriorityQueue<Pair> pq = new PriorityQueue<Pair>((x, y) -> x.distance - y.distance);

        boolean[] vis = new boolean[V];

        pq.add(new Pair(0, 0));

        int sum = 0;

        while (pq.size() > 0) {

            int wt = pq.peek().distance;
            int node = pq.peek().node;
            pq.remove();


            if (vis[node]){ 
                continue;}

            // add it to the mst

            vis[node] = true;
            sum += wt;

         for (int i = 0; i < adj.get(node).size(); i++) {
          
               int edW = adj.get(node).get(i).distance;
                int adjNode = adj.get(node).get(i).node;

                if (!vis[adjNode] ) {
                    pq.add(new Pair(edW, adjNode));
                }
            }
        }

        return sum;

    }

}
