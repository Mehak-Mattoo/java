class Solution {
    public int change(int amount, int[] coins) {

        int n = coins.length;
    
        int dp[][] = new int[n][amount + 1];

        return helper(n - 1, coins, amount, dp);
    

    }

      public static int helper(int i, int[] coins, int amount, int dp[][]) {

        if (i == 0) {
            if (amount % coins[0] == 0) { // Check if amount is divisible by the coin denomination
                return 1;
            }
            return 0;
        }

        if (dp[i][amount] != 0) {
            return dp[i][amount];
        }

        int take = 0;

        if (coins[i] <= amount) {
            take = helper(i, coins, amount - coins[i], dp);
        }

        int notTake = helper(i - 1, coins, amount, dp);

        return dp[i][amount] = take + notTake;
    }
}






class Solution {
    public int change(int amount, int[] coins) {

        int n = coins.length;
long dp[][] = new long[n][amount + 1];

        // Initialize base condition for the first element of the array
        for (int i = 0; i <= amount; i++) {
            if (i %  coins[0] == 0)
                dp[0][i] = 1;
            // Else condition is automatically fulfilled, as dp array is initialized to zero
        }

        // Fill the dp array using dynamic programming
        for (int ind = 1; ind < n; ind++) {
            for (int target = 0; target <= amount; target++) {
                long notTaken = dp[ind - 1][target];

                long taken = 0;
                if ( coins[ind] <= target)
                    taken = dp[ind][target -  coins[ind]];

                dp[ind][target] = notTaken + taken;
            }
        }

        return (int)dp[n - 1][amount];

    }

}




class Solution {
    public int change(int amount, int[] coins) {

        int n = coins.length;

// int dp[][] = new int[n][amount + 1];
int [] prev= new int[amount + 1];

        // Initialize base condition for the first element of the array
        for (int i = 0; i <= amount; i++) {
            if (i %  coins[0] == 0){
                prev[i] = 1;}
            // Else condition is automatically fulfilled, as dp array is initialized to zero
        }

        // Fill the dp array using dynamic programming
        for (int ind = 1; ind < n; ind++) {
            int curr [] = new int[amount + 1];
            for (int target = 0; target <= amount; target++) {

                int notTaken = prev[target];

                int taken = 0;
                if ( coins[ind] <= target)
                    taken = curr[target -  coins[ind]];

                curr[target] = notTaken + taken;
            }

            prev= curr;
        }

        return prev[amount];

    }

}
