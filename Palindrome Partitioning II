class Solution {
    public int minCut(String s) {

        int n = s.length();

        if (n == 1 || isPalindrome(s, 0, n-1)) {
            return 0;
        }

        int[] dp = new int[n];
        Arrays.fill(dp, -1);

        return helper(0, n, s, dp)-1;

    }

    public static int helper(int i, int n, String s, int[] dp) {

        if (i == n) {
            return 0;
        }

        if (dp[i] != -1) {
            return dp[i];
        }

        int min = Integer.MAX_VALUE;

        for (int j = i; j < n; j++) {
            if (isPalindrome(s,i,j) ){
                int steps = 1 + helper(j + 1, n, s, dp);

                min = Math.min(min, steps);
            }
        }

        return dp[i] = min;

    }

    public static boolean isPalindrome(String s, int low, int high) {
        while (low < high) {
            if (s.charAt(low++) != s.charAt(high--)) {
                return false;
            }
        }
        return true;
    }
}




class Solution {
    public int minCut(String s) {

        int n = s.length();

        if (n == 1 || isPalindrome(s, 0, n - 1)) {
            return 0;
        }

        int[] dp = new int[n + 1];
        Arrays.fill(dp, -1);

        for (int i = n - 1; i >= 0; i--) {
            int min = Integer.MAX_VALUE;
            for (int j = i; j < n; j++) {

                if (isPalindrome(s, i, j)) {
                    int steps = 1 + dp[j + 1];

                    min = Math.min(min, steps);
                }
            }

            dp[i] = min;

        }

        return dp[0];
    }

    public static boolean isPalindrome(String s, int low, int high) {
        while (low < high) {
            if (s.charAt(low++) != s.charAt(high--)) {
                return false;
            }
        }
        return true;
    }
}
