class Solution {
    public int minDays(int[] bloomDay, int m, int k) {

        int n= bloomDay.length;

        if(m*k>n){  // if number of bouquets* k > arr.length == not possible to form bouquets
        return -1;}

         int min=Integer.MAX_VALUE, max= Integer.MIN_VALUE;

// min= first possibility  max== one of the possible ans

        for(int i=0; i<bloomDay.length; i++){ 
            min= Math.min(min, bloomDay[i]);
            max= Math.max(max, bloomDay[i]);        }


         for(int i=min; i<= max; i++){

             if(isPossible(bloomDay, m, k , i)){
                 return i; }}
      
     return -1;}   
    

    public static boolean isPossible(int arr[], int m, int k, int day){
        int count=0, bouquets=0;

          for(int i=0; i<arr.length; i++){ // if day <= curr day then it is blooming
              if(arr[i]<= day){  // get the adjacent blooming flowers
                  count++;  }
              
              else{ // if they are not blooming
                  bouquets+= ( count/k); // find how many bouquets can be formed
                  count=0;  }}

                  bouquets+= count/k; // at the end again

               if( bouquets>= m){
                   return true;  }

return false; }

}
