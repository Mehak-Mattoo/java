class Solution {
    public List<List<Integer>> threeSum(int[] nums) {

Set<List<Integer>> set = new HashSet<>();

List<Integer> temp = Arrays.asList(nums[i], nums[j], nums[j2]);
temp.sort(null);
set.add(temp);}}}}

int twoSum=0;

for (int i = 0; i < nums.length; i++) {
    Set<Integer> set2 = new HashSet<>();
     for (int j = i+1; j < nums.length; j++) {

twoSum= nums[i]+nums[j];
int third= 0- twoSum;

if(set2.contains(third)){
  List<Integer> temp = Arrays.asList(nums[i], nums[j], third);
 temp.sort(null);
 set.add(temp);}
set2.add(nums[j]);}} 




    List<List<Integer>> bigList = new ArrayList<>();

Arrays.sort(nums);

for(int i=0; i<nums.length; i++){

    if(i!=0 && nums[i]== nums[i-1]){
        continue;}

    int j= i+1;
    int k=nums.length-1;


    while(j<k){
int sum = nums[i] + nums[j] + nums[k];
if(sum>0){
    k--;}

    if(sum<0){
        j++;}
    
    else if (sum==0){
 List<Integer> temp = Arrays.asList(nums[i], nums[j], nums[k]);
 bigList.add(temp);
 j++; k--;

  while (j < k && nums[j] == nums[j - 1]) {
      j++;}
  while (j < k && nums[k] == nums[k + 1]) {
      k--;}}

    }
}




return bigList;
    }
}
