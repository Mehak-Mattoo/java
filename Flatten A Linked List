public class Solution {
    public static Node flattenLinkedList(Node head) {

        List<Integer> tempList= new ArrayList<>();

        Node temp = head;

        while(temp!=null){
            Node down = temp;

            while(down!=null){// get all child nodes
                tempList.add(down.data); //put in temp list
                down= down.child;
            }

            temp= temp.next;
        }

        Collections.sort(tempList);// sort them

        return convert(tempList);

 }


 public static Node convert( List<Integer> tempList){ // convert into a vertical list

     if(tempList.size()==0){
         return null;
     }

     Node head = new Node(tempList.get(0));
     Node temp= head;

     for (int i = 1; i < tempList.size(); i++) {

         Node newNode = new Node(tempList.get(i));// make a new vertical list
         temp.child= newNode;
         temp= temp.child;       
     }
     return head;
 }
}
 






ollowing is the class structure of the Node class:

public class Solution {
    public static Node flattenLinkedList(Node head) {

        if(head==null|| head.next==null){
            return head;
        }

Node merged = flattenLinkedList(head.next); // going to the last of list

return convert(head, merged);// we start merging the last list with one previous one

 }


 public static Node convert( Node first , Node second){ 

Node dummy= new Node(0);
 Node curr = dummy;

while(first!=null&& second!=null){
  
    if(first.data< second.data){
        curr.child= first;
        curr=first;
        first= first.child;
    }
    else{
        curr.child= second;
        curr= second;
        second= second.child;

    }
    curr.next=null;
}

if(first!=null){
    curr.child= first;
}

if(second!=null){
    curr.child= second;
}


return dummy.child;


  
 }
}
 
