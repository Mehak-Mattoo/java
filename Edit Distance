class Solution {
    public int minDistance(String word1, String word2) {

        int n= word1.length(), m= word2.length();

        int [][] dp= new int [n+1][m+1];



        return helper(n, m, word1, word2, dp);

    }

    public static int helper(int n, int m, String s1, String s2, int [][] dp) {

        if (n == 0) {
            return m;
        }

        if (m == 0) {
            return n;
        }

        if(dp[n][m]!=0){
            return dp[n][m];
        }

        if (s1.charAt(n - 1) == s2.charAt(m - 1)) {
            return  dp[n][m]= helper(n - 1, m - 1, s1, s2, dp);
        }

        int insert = helper(n, m-1, s1, s2, dp);
        int delete = helper(n - 1, m, s1, s2, dp);
        int replace = helper(n - 1, m - 1, s1, s2, dp);

        return dp[n][m]=  1 + Math.min(insert, Math.min(replace, delete));
    }
}





class Solution {
    public int minDistance(String word1, String word2) {

        int n = word1.length(), m = word2.length();

        int[][] dp = new int[n + 1][m + 1];

        int []prev =  new int [m+1];

        for (int i = 0; i <= n; i++) {// when word2 is empty-> need to delete all chars from word1
            dp[i][0] = i;
        }

        for (int i = 0; i <= m; i++) {// when word1 is empty-> need to insert all chars from word2
            dp[0][i] = i;
        }

        for (int i = 1; i <= n; i++) {
            
            for (int j = 1; j <= m; j++) {

                if (word1.charAt(i - 1) == word2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1];
                }

                else {
                    int insert = dp[i][j - 1];
                    int delete = dp[i - 1][j];
                    int replace = dp[i - 1][j - 1];

                    dp[i][j] = 1+ Math.min(insert, Math.min(delete, replace));
                }

            }
        }

        return dp[n][m];
    }
}




class Solution {
    public int minDistance(String word1, String word2) {

        int n = word1.length(), m = word2.length();

        int[] prev = new int[m + 1];

        for (int i = 0; i <= m; i++) {// when word2 is empty-> need to delete all chars from word1
            prev[i] = i;
        }

        for (int i = 1; i <= n; i++) {
            int[] curr = new int[m + 1];
            curr[0] = i;
            for (int j = 1; j <= m; j++) {

                if (word1.charAt(i - 1) == word2.charAt(j - 1)) {
                    curr[j] = prev[j - 1];
                }

                else {
                    int insert = curr[j - 1];
                    int delete = prev[j];
                    int replace = prev[j - 1];

                    curr[j] = 1 + Math.min(insert, Math.min(delete, replace));
                }
            }

            prev = curr;

        }

        return prev[m];
    }
}


