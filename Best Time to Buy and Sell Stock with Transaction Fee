class Solution {
    public int maxProfit(int[] prices, int fee) {

        int n = prices.length;
        int[][] dp = new int[n][2];

        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }

        return helper(0, fee, n, prices, 0, dp);
    }

    public static int helper(int i, int fee, int n, int[] prices, int flag, int[][] dp) {

        if (i == n) {
            return 0;
        }

        if (dp[i][flag] != -1) {
            return dp[i][flag];
        }

        int profit;

        if (flag == 0) {
            profit = Math.max(-prices[i] + helper(i + 1, fee, n, prices, 1, dp), helper(i + 1, fee, n, prices, 0, dp));
        }

        else {
            profit = Math.max(prices[i]- fee+ helper(i + 1, fee, n, prices, 0, dp), helper(i + 1, fee, n, prices, 1, dp));

        }
        return dp[i][flag] = profit;
    }
}





class Solution {
    public int maxProfit(int[] prices, int fee) {

        int n = prices.length;

        int[][] dp = new int[n + 1][2];

        // Base condition: If we have no stocks to buy or sell, profit is 0
        dp[n][0] = dp[n][1] = 0;

        int profit = 0;

        // Iterate through the array in reverse to calculate the maximum profit
        for (int ind = n - 1; ind >= 0; ind--) {
            for (int buy = 0; buy <= 1; buy++) {
                if (buy == 0) { // We can buy the stock
                    profit = Math.max( dp[ind + 1][0], -prices[ind] + dp[ind + 1][1]);
                }

                if (buy == 1) { // We can sell the stock
                    profit = Math.max( dp[ind + 1][1], prices[ind] -fee+ dp[ind + 1][0]);
                }

                dp[ind][buy] = profit;
            }
        }
        return dp[0][0]; // The maximum profit is stored at dp[0][0]
    }
}




class Solution {
    public int maxProfit(int[] prices, int fee) {

        int n = prices.length;

       int[] prev = new int[2];

        prev[0] = 0;
        prev[1] = 0;

        int profit = 0;

        for (int i = n - 1; i >= 0; i--) {
            int[] curr = new int[2];

            for (int j = 0; j < 2; j++) {

                if (j == 0) {
                    profit = Math.max(-prices[i] + prev[1], prev[0]);
                } else {
                    profit = Math.max(prices[i] -fee+ prev[0], prev[1]);

                }
                curr[j] = profit;
            }
            prev = curr;
        }

        return prev[0];
    }
}
