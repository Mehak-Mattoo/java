class Solution {
    public int fib(int n) {

        HashMap<Integer, Integer> map= new HashMap<>();

        if(n==0){
            return 0;
        }

        if(n==1){
            return 1;
        }

        return fib(n-1)+ fib(n-2);

    }
}







class Solution { // by dp
    public int fib(int n) {

        HashMap<Integer, Integer> map= new HashMap<>();

        if(n==0){
            return 0;
        }

        if(n==1){
            return 1;
        }

        if(map.containsKey(n)){
            return map.get(n);
        }

        int res= fib(n-1)+ fib(n-2);

        map.put(n, res);
        return res;
        
    }
}




class Solution {
    public int fib(int n) {

        if(n<=1){
            return n;
        }

        int[] dp = new int[n + 1];

        dp[0] = 0;
        dp[1] = 1;

        for (int i = 2; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }

        return dp[n];

    }
}





class Solution {
    public int fib(int n) {

        if (n <= 1) {
            return n;
        }

        int prev2 = 0; 
        int prev = 1;

        for (int i = 2; i <= n; i++) {
            int curr = prev + prev2;  // prev 2(fn-2)  -> prev (n-1)   curr 

            prev2 = prev;
            prev = curr;
        }

        return prev;

    }
}
