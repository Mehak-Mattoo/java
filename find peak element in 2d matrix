class Solution {
    public int[] findPeakGrid(int[][] mat) {
        int rows = mat.length;
        int cols = mat[0].length;

        int[] result = new int[2]; // To store the indices of the peak element

        for (int i = 0; i < rows; i++) { 
            for (int j = 0; j < cols; j++) {

                int curr= mat[i][j];

                int top= (i>0)? mat[i-1][j]: -1;
                int left= (j>0) ? mat[i][j-1]: -1;
                int right= (j< cols-1) ? mat[i][j+1] : -1;
                int bottom= (i<rows-1) ? mat[i+1][j]: -1;


                if(curr>top && curr > left && curr >right && curr >bottom){
                    result[0]= i;
                    result[1]= j;}    }}

        return result;                   
    }
}






int low=0, high = m-1;

        while (low<=high){
            int mid= (low+high)/2;
            int max= maxElement(mat, mid);

            int left= (mid-1>=0) ? mat[max][mid-1]:-1;
            int right= (mid+1 <m) ? mat[max][mid+1]:-1;


            if(mat[max][mid] > left && mat[max][mid]>right ){
                return new int []{ max, mid};} 
            
            
            else if (mat[max][mid] <left ){
                high = mid-1; } // if left has greater element, look there

            else {
                low= mid+1;  } }

return new int []{-1,-1};
                      
    }


    public int maxElement(int[][] matrix, int mid) { // find the max element in a row
        int index = -1;
        int max = Integer.MIN_VALUE;

        for (int i = 0; i < matrix.length; i++) {
            int el = matrix[i][mid];

            if (el > max) {
                max = Math.max(max, el);
                index = i;
            }
        }
        return index;
    }
}
