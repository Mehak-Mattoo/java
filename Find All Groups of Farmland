class Solution {
    public int[][] findFarmland(int[][] land) {
        int n = land.length;
        int m = land[0].length;
        List<int[]> farmlands = new ArrayList<>();

        int[][] vis = new int[n][m];

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (land[i][j] == 1 && vis[i][j] == 0) {
                    int[] bottomRight = new int[]{i, j}; // i,j-> top left corners 
                    dfs(i, j, land, vis, bottomRight);
                    farmlands.add(new int[]{i, j, bottomRight[0], bottomRight[1]});
                }
            }
        }

        return farmlands.toArray(new int[farmlands.size()][]);
    }

    private void dfs(int r, int c, int[][] land, int[][] vis, int[] bottomRight) {
        int n = land.length;
        int m = land[0].length;

        if (r < 0 || r >= n || c < 0 || c >= m || vis[r][c] == 1 || land[r][c] == 0) {
            return;
        }

        vis[r][c] = 1;
        bottomRight[0] = Math.max(bottomRight[0], r); // max value will correspond to bottom right corners
        bottomRight[1] = Math.max(bottomRight[1], c);

        dfs(r - 1, c, land, vis, bottomRight); // Up
        dfs(r, c + 1, land, vis, bottomRight); // Right
        dfs(r + 1, c, land, vis, bottomRight); // Down
        dfs(r, c - 1, land, vis, bottomRight); // Left
    }
}
