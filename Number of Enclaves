class Solution {
    class Pair {
        int first;
        int second;

        public Pair(int first, int second) {
            this.first = first;
            this.second = second;
        }
    }

    public int numEnclaves(int[][] grid) {

        int n = grid.length, m = grid[0].length;
        int[][] vis = new int[n][m];
        Queue<Pair> q = new LinkedList<>();

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (i == 0 || j == 0 || i == n - 1 || j == m - 1) { // mark all the boundary 1
                    if (grid[i][j] == 1) {
                        q.offer(new Pair(i, j));
                        vis[i][j] = 1;
                    }
                }

            }
        }

        int x[] = { -1, 0, +1, 0 };
        int y[] = { 0, +1, +0, -1 };

        while (!q.isEmpty()) {
            int r = q.peek().first;
            int c = q.peek().second;

            q.poll();

            for (int i = 0; i < 4; i++) {
                int nrow = r + x[i];
                int ncol = c + y[i];

                if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && vis[nrow][ncol] == 0 && grid[nrow][ncol] == 1) {
                    q.offer(new Pair(nrow, ncol)); // if boundary 1 are connected to more 1
                    vis[nrow][ncol] = 1; // mark them
                }

            }

        }
        int count = 0;
        for (int i = 0; i < n; i++) { // in the end, all boundary 1 and conncted to it ==1 in vis
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1 && vis[i][j] == 0) {// then remaining 0 in vis and corresponding 1 in grid == ans 
                    count++;
                }

            }
        }

        return count;

    }
}
