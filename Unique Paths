class Solution {
    public int uniquePaths(int m, int n) {

        return helper(m-1, n-1);

    }

    public static int helper(int r, int c) {

        if (r == 0 && c == 0) {
            return 1;
        }

        if (r < 0 || c < 0) {
            return 0;
        }

        int right = helper(r -1, c);
        int down = helper(r, c - 1);

        return right + down;

    }
}



class Solution { // memoized
    public int uniquePaths(int m, int n) {

        int[][] dp = new int[m][n];

        return helper(m - 1, n - 1, dp);

    }

    public static int helper(int r, int c, int[][] dp) {

        if (r == 0 && c == 0) {
            return 1;
        }

        if (r < 0 || c < 0) {
            return 0;
        }

        if (dp[r][c] != 0) {
            return dp[r][c];
        }

        int right = helper(r - 1, c, dp);
        int down = helper(r, c - 1, dp);

      return dp[r][c]= right + down;

    }
}



class Solution {
    public int uniquePaths(int m, int n) {

        int[][] dp = new int[m][n];

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
               
                int right = 0, down = 0;

                if (i == 0 && j == 0) {
                    dp[i][j] = 1;
                    continue;
                }

                else {

                    if (i > 0) {
                        right = dp[i - 1][j];
                    }

                    if (j > 0) {
                        down = dp[i][j - 1];
                    }
                }

                dp[i][j] = right + down;
            }

        }

        return dp[m - 1][n - 1];

    }
}



class Solution {
    public int uniquePaths(int m, int n) {

        int[] prev = new int[m]; //prev upper array-> stores upper values

        for (int i = 0; i < m; i++) {
            int temp[] = new int[n]; // curr array

            for (int j = 0; j < n; j++) {

                int right = 0, down = 0;

                if (i == 0 && j == 0) {// first cell is already filled
                    temp[j] = 1;
                    continue;
                }

                else {

                    if (i > 0) {
                        right = prev[j];// upper value
                    }

                    if (j > 0) {
                        down = temp[j - 1]; // get the prev value
                    }

                    temp[j] = right + down;
                }
            }

            prev = temp;

        }

        return prev[n - 1];

    }
}
