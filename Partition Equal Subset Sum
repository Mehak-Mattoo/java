class Solution {
    public boolean canPartition(int[] nums) {

        int sum = 0, n = nums.length;

        for (int i : nums) { // the whole sum
            sum += i;
        }

        if (sum % 2 == 1) { // if sum is odd , there is no way to divide array into 2
            return false;
        }

        return helper(0, sum / 2, n, nums, new ArrayList());  // sum/2 must be even -> if half sum is found , then other half would have same sum

    }

    public static boolean helper(int i, int target, int n, int[] nums, List<Integer> list) {

        if (target == 0) {
            return true;
        }

        if (target <0 || i == n) {
            return false;
        }

        list.add(nums[i]);

        if (helper(i + 1, target - nums[i], n, nums, list)) {
            return true;
        }

        list.remove(list.size() - 1);

        if (helper(i + 1, target, n, nums, list)) {
            return true;
        }

        return false;

    }
}




class Solution {
    public boolean canPartition(int[] nums) {

        int n = nums.length, sum = 0;

        for (int i : nums) {
            sum += i;
        }

        if (sum % 2 == 1) {
            return false;
        }

        else {
            // Calculate the target sum for each subset
            int k = sum / 2;
            // Create a DP table to store the results of subproblems
            boolean dp[][] = new boolean[n][k + 1];

            // Initialize the first row of the DP table
            for (int i = 0; i < n; i++) {
                dp[i][0] = true;
            }

            // Initialize the first column of the DP table
            if (nums[0] <= k) {
                dp[0][nums[0]] = true;
            }

            // Fill in the DP table using bottom-up dynamic programming
            for (int ind = 1; ind < n; ind++) {
                for (int target = 1; target <= k; target++) {
                    // Calculate if the current element is not taken
                    boolean notTaken = dp[ind - 1][target];

                    // Calculate if the current element is taken
                    boolean taken = false;
                    if (nums[ind] <= target) {
                        taken = dp[ind - 1][target - nums[ind]];
                    }

                    // Update the DP table for the current element and target sum
                    dp[ind][target] = notTaken || taken;
                }
            }

            return dp[n - 1][k];

        }
// return false;
         
    }
}
