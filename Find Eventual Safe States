class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {

        int n = graph.length;
        List<List<Integer>> adj = new ArrayList<>();
        int []indegree= new int[n];


        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());

        }

        for(int i=0; i<n;i++){
            for(int neighbour: graph[i]){
                adj.get(neighbour).add(i);// reversing the edges
                indegree[i]++;
            }

        }

        Queue<Integer> q= new LinkedList<>();

        for(int i=0; i<n;i++){// first add edges with indegree 0
            if(indegree[i]==0){
                q.add(i);
            }

        }
        List<Integer> safeNodes = new ArrayList<>();

        while(!q.isEmpty()){
            int curr= q.poll();

            safeNodes.add(curr);
             for(int neighbour: adj.get(curr)){
                indegree[neighbour]--;

                if( indegree[neighbour]==0){
                    q.add(neighbour);
                }
             }
        }

        Collections.sort(safeNodes);

        return safeNodes;

    }
}
