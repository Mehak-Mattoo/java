import java.util.ArrayList;
public class Solution {
    public static int kthElement(ArrayList<Integer> arr1, ArrayList<Integer> arr2, int n, int m, int k) {
     ArrayList<Integer> list= new ArrayList<>();

        int i=0, j=0;

        while(i<n && j<m){
            if(arr1.get(i)< arr2.get(j)){
                list.add(arr1.get(i));
                i++; }

            else{
                 list.add(arr2.get(j));
                j++;  }  }

        while(i<n){
             list.add(arr1.get(i));
                i++; }

        while(j<m){
             list.add(arr2.get(j));
            j++;}

        return list.get(k-1);            

    }
}





import java.util.ArrayList;
public class Solution {
    public static int kthElement(ArrayList<Integer> arr1, ArrayList<Integer> arr2, int n, int m, int k) {

        int i=0, j=0, count=1, element=-1;

        while(i<n && j<m){
            
            if(arr1.get(i)< arr2.get(j)){
                 if(count==k){
                element= arr1.get(i);  }
                i++; 
                count ++;}

            else{
                if(count==k){
                element= arr2.get(j);  }
                j++; 
                count++; }  }

        while(i<n){
             if(count==k){
                element= arr1.get(i);  }
                i++; 
                count++;}

        while(j<m){
            if(count==k){
                element= arr2.get(j);  }

            j++;
            count++;}

        return element;            

    }
}







import java.util.ArrayList;
public class Solution {
    public static int kthElement(ArrayList<Integer> arr1, ArrayList<Integer> arr2, int m, int n, int k) {
        if(m>n){
            return kthElement(arr2, arr1, n, m, k); //pick out the shorter array to reduce TC
        }
        int low = Math.max(0,k-n);
        int high = Math.min(k,m);
        
        while(low<=high){
            int mid1 = low + (high-low)/2;
            int mid2 = k-mid1;
            int l1 = (mid1==0) ? Integer.MIN_VALUE:arr1.get(mid1-1);
            int l2 = (mid2==0) ? Integer.MIN_VALUE:arr2.get(mid2-1);
            int r1 = (mid1==m) ? Integer.MAX_VALUE:arr1.get(mid1);
            int r2 = (mid2==n) ? Integer.MAX_VALUE:arr2.get(mid2);
            if(l1<=r2 && l2<=r1){
                return Math.max(l1,l2);
            }
            else if ( l1>r2){
                high = mid1-1;
            }
            else{
                low = mid1+1;
            }
        }
        return -1;
    }
}
