import java.util.*;

public class Solution {
     private static void dfs(int node, int []vis, ArrayList<ArrayList<Integer>> adj,Stack<Integer> st) {

        vis[node] = 1;
        for (Integer it : adj.get(node)) {
            if (vis[it] == 0) {
                dfs(it, vis, adj, st);
            }
        }
        st.push(node);
    }

    private static void dfs3(int node, int[] vis, ArrayList<ArrayList<Integer>> adjT) {

        vis[node] = 1;
        for (Integer it : adjT.get(node)) {
            if (vis[it] == 0) {
                dfs3(it, vis, adjT);
            }
        }
    }

    public static int stronglyConnectedComponents(int V, ArrayList<ArrayList<Integer>> edges) {

        // Create adjacency list for the graph.

        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();

        for(int i=0 ; i<V ; i++) {
            adj.add(new ArrayList<Integer>());
        }

        int e = edges.size();
        for (int i = 0; i < e; i++){
            int a = edges.get(i).get(0);
            int b = edges.get(i).get(1);
            adj.get(a).add(b);
        } 

         int[] vis = new int[V];

        Stack<Integer> st = new Stack<Integer>();

        for (int i = 0; i < V; i++) {
            if (vis[i] == 0) {
                dfs(i, vis, adj, st);
            }
        }


        ArrayList<ArrayList<Integer>> adjT = new ArrayList<ArrayList<Integer>>();
        for (int i = 0; i < V; i++) {
            adjT.add(new ArrayList<Integer>());
        }

        for (int i = 0; i < V; i++) {
            vis[i] = 0;

            for (Integer it : adj.get(i)) { // reversing edges
                adjT.get(it).add(i);
            }
        }

        int scc = 0;

        while (!st.isEmpty()) {

            int node = st.pop();

            if (vis[node] == 0) {
                scc++;
                dfs3(node, vis, adjT);
            }
        }
        return scc;
    }
}
