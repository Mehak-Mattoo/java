/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
         HashMap<Integer, Integer> map = new HashMap<Integer,Integer>();
        for (int i=0;i<inorder.length;i++){
            map.put(inorder[i], i);}

        TreeNode root=  build(inorder, 0,inorder.length-1, postorder, 0, postorder.length-1, map);

        return root;
        
    }

  static TreeNode build(int[] inorder, int is, int ie, int[] postorder,
                      int ps, int pe, HashMap<Integer,Integer> map) {
    if (is > ie || ps > pe) {
        return null;
    }

    TreeNode root = new TreeNode(postorder[pe]);
    int inRoot = map.get(postorder[pe]);
    int x = inRoot - is; // Number of nodes in the left subtree

 
    root.left = build(inorder, is, inRoot - 1, postorder, ps, ps + x - 1, map);
    root.right = build(inorder, inRoot + 1, ie, postorder, ps + x, pe - 1, map);

    return root;
}

}
