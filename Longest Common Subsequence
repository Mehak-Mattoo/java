class Solution {
    public int longestCommonSubsequence(String text1, String text2) {

        int n1= text1.length(), n2= text2.length();

        int [][] dp = new int[n1][n2];
        

        return helper(n1-1, n2-1, text1, text2, dp);
        
    }

    public static int helper(int index1, int index2, String s1, String s2, int [][] dp){

        if(index1<0 || index2<0){// there is nothing to compare
            return 0;
        }

        if(dp[index1][index2]!=0){
            return  dp[index1][index2];
        }

        if(s1.charAt(index1) == s2.charAt(index2)){
            return dp[index1][index2]= 1+ helper(index1-1, index2-1, s1, s2, dp);
        }

        return dp[index1][index2]= Math.max(helper(index1, index2-1, s1, s2, dp), helper(index1-1, index2, s1, s2, dp)); // when char are diff, we have to look for every possibility in both direction
    }
}




class Solution {
    public int longestCommonSubsequence(String text1, String text2) {

        int n1 = text1.length(), n2 = text2.length();

        int[][] dp = new int[n1 + 1][n2 + 1];

        for (int i = 0; i <= n1; i++) {  // shifted the index by 1 place
            dp[i][0] = 0;
        }
        for (int i = 0; i <= n2; i++) {
            dp[0][i] = 0;

        }

        for (int i = 1; i <= n1; i++) {
            for (int j = 1; j <= n2; j++) {
                if (text1.charAt(i - 1) == text2.charAt(j - 1)) {
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }

        return dp[n1][n2];
    }
}




class Solution {
    public int longestCommonSubsequence(String text1, String text2) {

        int n1 = text1.length(), n2 = text2.length();

        int prev[] = new int[n2 + 1];

        for (int i = 1; i <= n1; i++) {
            int curr[] = new int[n2 + 1];

            for (int j = 1; j <= n2; j++) {
                if (text1.charAt(i - 1) == text2.charAt(j - 1)) {
                    curr[j] = 1 + prev[j - 1];
                } else {
                    curr[j] = Math.max(prev[j], curr[j - 1]);
                }
            }
            prev = curr;

        }

        return prev[n2];

    }

}
