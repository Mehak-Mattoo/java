class Solution {
    public int minInsertions(String s) {

        return s.length()- longestPalindromeSubseq(s); // n- longest plaindromic subseq.

        // 1. find out longest palindrome
        // 2. min insertions= put the remaining letters at front or back around longest palindrome
        
    }
      public int longestPalindromeSubseq(String s) {

        int n = s.length();

        StringBuilder reversed = new StringBuilder(s).reverse();
        
        int prev[] = new int[n + 1];

        for (int i = 1; i <= n; i++) {
            int curr[] = new int[n + 1];

            for (int j = 1; j <= n; j++) {
                if (s.charAt(i - 1) ==  reversed.charAt(j - 1)) {
                    curr[j] = 1 + prev[j - 1];
                } else {
                    curr[j] = Math.max(prev[j], curr[j - 1]);
                }
            }
            prev = curr;

        }

        return prev[n];
       
    }
}
