class Solution {
    public int maxCoins(int[] nums) {

         ArrayList<Integer> list = new ArrayList<>();

        for(int el: nums){
            list.add(el);
        }

        int n = list.size();

        list.add(1);
        list.add(0, 1);

        int[][] dp = new int[n+1][n+1];

        return helper(1, n , list, dp);
    }

    public static int helper(int i, int j, List<Integer> nums, int[][] dp) {

        if (i > j) {
            return 0;
        }

        int max= Integer.MIN_VALUE;

        for (int k = i; k <= j; k++) {
          
            int burst = helper(i, k-1, nums, dp) + helper(k + 1, j, nums, dp) + nums.get(i - 1) * nums.get(k) * nums.get(j + 1);

            max= Math.max(max, burst);
        }

        return dp[i][j]= max;


    }
}


class Solution {
    public int maxCoins(int[] nums) {

        ArrayList<Integer> list = new ArrayList<>();

        for (int el : nums) {
            list.add(el);
        }

        int n = list.size();

        list.add(1); // put 1 at end
        list.add(0, 1); // put 1 at first

        int[][] dp = new int[n + 2][n + 2];

        for (int i = n ; i >= 1; i--) {
            for (int j = 1; j <= n; j++) {
                if (i > j) {
                    continue;
                }
                int max = Integer.MIN_VALUE;

                for (int k = i; k <= j; k++) {
                    int burst = list.get(i - 1) * list.get(k) * list.get(j + 1) + dp[i][k - 1] + dp[k + 1][j];
                    max = Math.max(max, burst);
                    dp[i][j] = max;
                }

            }
        }

        return dp[1][n];

    }

    public static int helper(int i, int j, List<Integer> nums, int[][] dp) {

        if (i > j) {
            return 0;
        }

        int max = Integer.MIN_VALUE;

        for (int k = i; k <= j; k++) {

            int burst = helper(i, k - 1, nums, dp) + helper(k + 1, j, nums, dp)
                    + nums.get(i - 1) * nums.get(k) * nums.get(j + 1);

            max = Math.max(max, burst);
        }

        return dp[i][j] = max;

    }
}
