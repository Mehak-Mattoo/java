import java.util.* ;
import java.io.*; 

public class Solution {

    public static ArrayList<Integer> topologicalSort(ArrayList<ArrayList<Integer>> edges, int v, int e)  {

        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();

        for(int i=0;i<v;i++)   {

            adj.add(new ArrayList<>());   }

        for(int i=0;i<e;i++)  {

            int u=edges.get(i).get(0);
            int v1=edges.get(i).get(1);

            adj.get(u).add(v1);

        }

        Stack<Integer> st= new Stack<>();

        int[] vis=new int[v];

        for(int i=0;i<v;i++) {

            if(vis[i]==0)  {

                dfs(i,vis,adj,st);  } }

        ArrayList<Integer> ans= new ArrayList<>();

        while(!st.isEmpty())   { // pop all elements to get the topo sort

            ans.add(st.pop());   }

        return ans;

    }

    public static void dfs(int node,int[] vis,ArrayList<ArrayList<Integer>> adj,Stack<Integer> st) {

        vis[node]=1;

        for(int neighbour: adj.get(node))  {

            if(vis[neighbour]==0){

                dfs(neighbour,vis,adj,st);    } }

        st.push(node);

    }

}
