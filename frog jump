import java.util.* ;
import java.io.*; 
public class Solution {



    static int  MinEnergy(int index, int heights[] ){

if(index== 0){
    return 0;
}

int jump1= MinEnergy(index-1,heights )+ Math.abs(heights[index]- heights[index-1]);

int jump2 = Integer.MAX_VALUE;

if(index>1){


jump2= MinEnergy(index-2, heights) + Math.abs(heights[index]- heights[index-2]); }

return Math.min(jump1,jump2);

    }
    public static int frogJump(int n, int heights[]) {

        return MinEnergy(n-1, heights);
    }

}




import java.util.* ;
import java.io.*; 
public class Solution {
    public static int frogJump(int n, int heights[]) {
           int dp[]= new int [n];

           return helper( n-1,  dp, heights);
       }

       public static int helper(  int i, int [] dp, int []heights){

             if(i==0){ // cost of going to index 0-> 0== 0
                    return 0;
             }

             if(dp[i]!=0){
                    return dp[i];
             }

             int right= Integer.MAX_VALUE; // declaring globally to cal culate min at end

             int left= helper(i-1, dp, heights)+ Math.abs(heights[i]- heights[i-1]) ;

             if(i>1){
               right= helper(i-2, dp, heights)+ Math.abs(heights[i]- heights[i-2]);}


             return  dp[i]= Math.min(left, right);
              
       }

}





import java.util.* ;
import java.io.*; 
public class Solution {
    public static int frogJump(int n, int heights[]) {
           int dp[]= new int [n];

           return helper( n-1,  dp, heights);
       }

       public static int helper(  int i, int [] dp, int []heights){

             if(i==0){
                    return 0;
             }

             if(dp[i]!=0){
                    return dp[i];
             }

             int right= Integer.MAX_VALUE;

             int left= helper(i-1, dp, heights)+ Math.abs(heights[i]- heights[i-1]) ;

             if(i>1){
               right= helper(i-2, dp, heights)+ Math.abs(heights[i]- heights[i-2]);}


             return  dp[i]= Math.min(left, right);





              
       }

}




import java.util.* ;
import java.io.*; 
public class Solution {
    public static int frogJump(int n, int heights[]) {
       
       int prev=0, prev2=0;

           for (int i = 1; i < n; i++) {
                  int right= Integer.MAX_VALUE;

                  int left= prev+ Math.abs(heights[i]- heights[i-1]);

                  if(i>1){
                         right= prev2+ Math.abs(heights[i]- heights[i-2]);
                  }

                int curr= Math.min(left, right);
                prev2= prev;
                prev= curr;

                  
           }

           return prev;
       }

}
