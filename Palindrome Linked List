/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {

           if (head == null || head.next == null) {
            return true; // An empty list or a list with one node is considered a palindrome
        }

        ListNode slow = head;
        ListNode fast = head;

        while(fast!=null && fast.next!=null){ //getting the middle of list
            slow= slow.next;
            fast= fast.next.next;
        }

        ListNode second= reverse(slow);
        ListNode first= head;

        while(second!=null){ // ccomparing the first half with second half from last
            if(first.val != second.val){
                return false; }
            
            first= first.next;
            second= second.next;
        }return true;


        
    }
    public static ListNode reverse(ListNode head){

        ListNode prev=null;
        ListNode curr= head;

        while(curr!=null){
            ListNode temp = curr.next;
            curr.next= prev;
            prev= curr;
            curr= temp;
        }
        return prev;
    }
}




/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {

        StringBuilder str= new StringBuilder();
        

        while(head!=null){
            str.append(String.valueOf(head.val));
            head= head.next;
        }

        if(str.toString().equals(str.reverse().toString())){
            return true;
        }

        return false;
        
    }
}
