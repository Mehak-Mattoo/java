import java.util.* ;
import java.io.*; 


class Node{

     Node links[];
   int endCount ;
   int prefixCount ;

    public Node(){

 links= new Node[26];
    endCount = 0;
    prefixCount = 0;}

    boolean containsKey(char c){
        return links[c-'a']!=null;
    }

    void put(char c, Node node){
        links[c-'a']= node;
    }

    Node get(char c) {
        return links[c - 'a'];
    }

 void increaseEnd(){
     endCount++;
 }

 void increasePrefix(){
     prefixCount++;
 }

  void deletePrefix(){
     prefixCount--;
 }

 void deleteEnd(){
     endCount--;

 }
}
public class Trie {

    private Node root;
    public Trie() {

        root= new Node();
     
    }

    public void insert(String word) {

        Node node = root;
        for (int i = 0; i < word.length(); i++) {
            char currentChar = word.charAt(i);

            if (!node.containsKey(currentChar)) { // put curr char in curent trie pointing to a new trie
                node.put(currentChar, new Node());
            }
            node = node.get(currentChar); // move to next trie
            node.increasePrefix();
        }
     node.increaseEnd();
    }

    public int countWordsEqualTo(String word) {
 Node node = root;

          for (int i = 0; i < word.length(); i++) {
            char currentChar = word.charAt(i);

            if (node.containsKey(currentChar)) { // put curr char in curent trie pointing to a new trie
            
            node = node.get(currentChar); // move to next trie}
     
    }
    else{
        return 0;
    }
    }return node.endCount;
    
    }

    public int countWordsStartingWith(String word) {
 
  Node node = root;

          for (int i = 0; i < word.length(); i++) {
            char currentChar = word.charAt(i);

            if (node.containsKey(currentChar)) { // put curr char in curent trie pointing to a new trie
            
            node = node.get(currentChar); // move to next trie}
     
    }
    else{
        return 0;
    }
    }return node.prefixCount;
    }

    public void erase(String word) {

         Node node = root;

          for (int i = 0; i < word.length(); i++) {
            char currentChar = word.charAt(i);

            if (node.containsKey(currentChar)) { // put curr char in curent trie pointing to a new trie
            
            node = node.get(currentChar); // move to next trie
            node.deletePrefix();
     
    }
    else{
        return;
    }
      node.deleteEnd();

     
    }

}

}
