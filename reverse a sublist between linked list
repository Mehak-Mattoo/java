/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {

 ListNode dummy = new ListNode(0);
 dummy.next= head;

 ListNode previous= dummy;
ListNode current= head;


 for(int i=0; i<left-1; i++){ // reach the left node
previous= previous.next; // just before left
current= current.next; // on left
}


ListNode subListHead= current;
ListNode preNode= null;

 for(int i=0; i<=right-left; i++){  // reverse the sublist /
      ListNode next= current.next;
      current.next= preNode;
      preNode= current;
      current= next;

 }
 previous.next= preNode; // join the left to end of sublist
 subListHead.next= current; // join the head to right element
 
 return dummy.next;


    }
}
