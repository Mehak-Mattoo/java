class Solution {
    public int longestConsecutive(int[] nums) {

        int n = nums.length, longest = 0;

        for (int i = 0; i < n; i++) {

            int curr = nums[i];
            int ans = 1;
            while (check(curr + 1, n, nums) == true) {
                ans++;
                curr++;

            }
            longest = Math.max(ans, longest);

        }

        return longest;

    }

    public static boolean check(int next, int n, int[] nums) {

        for (int i = 0; i < n; i++) {
            if (nums[i] == next) {
                return true;
            }
        }
        return false;

    }
}




class Solution {
    public int longestConsecutive(int[] nums) {

        int max = 0, n = nums.length, curr = 1, last=Integer.MIN_VALUE;

        if (n == 1) {
            return 1;
        }
        Arrays.sort(nums);

        for (int i = 0; i < n; i++) {
            if (last == nums[i]) {
                continue;
            } else if (last == nums[i] - 1) {
                curr++;
                last= nums[i];
               
            } else if (last != nums[i]-1){
                curr = 1;
                last= nums[i];
            }
             max = Math.max(curr, max);

        }

        return max;

    }
}




class Solution {
    public int longestConsecutive(int[] nums) {

        int max = 0, n = nums.length, count = 0;

        if (n == 1) {
            return 1;
        }

        HashSet<Integer> set = new HashSet<>();

        for (int i : nums) {
            set.add(i);
        }

        for (int i : set) {
            if (set.contains(i - 1)) {
                continue;
            } else if (!set.contains(i - 1)) {
            count=0;
                int curr = i;
                while (set.contains(curr)) {
                    count++;
                    curr++;
                }
            }

            max= Math.max(count, max);
        }

        return max;

    }
}
