class Solution {
    public int longestConsecutive(int[] nums) {

        int n = nums.length, longest = 0;

        for (int i = 0; i < n; i++) {

            int curr = nums[i];
            int ans = 1;
            while (check(curr + 1, n, nums) == true) {
                ans++;
                curr++;

            }
            longest = Math.max(ans, longest);

        }

        return longest;

    }

    public static boolean check(int next, int n, int[] nums) {

        for (int i = 0; i < n; i++) {
            if (nums[i] == next) {
                return true;
            }
        }
        return false;

    }
}




class Solution {
    public int longestConsecutive(int[] nums) {

        Set<Integer> set = new HashSet<>();
        int n = nums.length, longest = 0, last = Integer.MIN_VALUE, count=1;

        Arrays.sort(nums);

        for (int i = 0; i < n; i++) {
            int curr= nums[i];

            if(curr-1== last){ // can be a part of longest sequence
                count++; 
            }

             else if( curr-1!=last){// start fresh
            count=1; 
           }
            else if(curr== last){ // sam eelements-> skip
                continue;
            }

            last= curr;
            longest = Math.max(count, longest);


        }
        return longest;
    }
}




class Solution {
    public int longestConsecutive(int[] nums) {

        Set<Integer> set = new HashSet<>();
        int n = nums.length, longest = 0, last = Integer.MIN_VALUE;

        for (int i : nums) {
            set.add(i);
        }

        for (int i : set) {
            if (!set.contains(i - 1)) {// if set doesnt contain previous element-> then the curr element is the starting of the subsequence
                int count = 1;// and can be the potential ans

                while (set.contains(i + 1)) {// look if it has greater consecutive num
                    count++;
                    i++;
                }
                longest = Math.max(count, longest);
            }

        }
        return longest;
    }
}
