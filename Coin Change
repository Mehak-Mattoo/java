class Solution {
    public int coinChange(int[] coins, int amount) {
        int n = coins.length;

        if (amount == 0) {
            return 0;
        }

        int dp[][] = new int[n][amount + 1];

        int result = helper(n - 1, coins, amount, dp);
        return result == (int) Math.pow(10, 9) ? -1 : result;
    }

    public static int helper(int i, int[] coins, int amount, int dp[][]) {

        if (i == 0) {
            if (amount % coins[0] == 0) { //if amount is divisible by the coin , then we can make up the target
                return amount / coins[0];
            }
            return (int) Math.pow(10, 9);
        }

        if (dp[i][amount] != 0) {
            return dp[i][amount];
        }

        int take = (int) Math.pow(10, 9);

        if (coins[i] <= amount) {
            take = 1 + helper(i, coins, amount - coins[i], dp); // keep on taking same coin
        }

        int notTake = helper(i - 1, coins, amount, dp);

        return dp[i][amount] = Math.min(take, notTake);
    }
}




class Solution {
    public int coinChange(int[] coins, int amount) {
       int n = coins.length;


        int dp[][] = new int[n][amount+ 1];

        // Initialize the dp array for the first element of the array
        for (int i = 0; i <= amount; i++) {
            if (i % coins[0] == 0)
                dp[0][i] = i / coins[0];
            else
                dp[0][i] = (int) Math.pow(10, 9);
        }

        // Fill the dp array using dynamic programming
        for (int ind = 1; ind < n; ind++) {
            for (int target = 0; target <= amount; target++) {
                int notTake = 0 + dp[ind - 1][target];
                int take = (int) Math.pow(10, 9);

                // If the current element is less than or equal to the target, calculate 'take'
                if (coins[ind] <= target)
                    take = 1 + dp[ind][target - coins[ind]];

                // Store the minimum result in the dp array
                dp[ind][target] = Math.min(notTake, take);
            }
        }

        // Get the minimum number of elements needed for the target sum
        int ans = dp[n - 1][amount];

        // If it's not possible to achieve the target sum, return -1
        if (ans >= (int) Math.pow(10, 9))
            return -1;
        return ans;
    }
    }





class Solution {
    public int coinChange(int[] coins, int amount) {
        int n = coins.length;

        int prev[] = new int[amount + 1];

        for (int i = 0; i <= amount; i++) {
            if (i % coins[0] == 0){
                prev[i] = i / coins[0];}
            else{
                prev[i] = (int) Math.pow(10, 9);}
        }

        for (int ind = 1; ind < n; ind++) {
            int curr[] = new int[amount + 1];

            for (int target = 0; target <= amount; target++) {

                int notTake = prev[target];
                int take = (int) Math.pow(10, 9);

                // If the current element is less than or equal to the target, calculate 'take'
                if (coins[ind] <= target)
                    take = 1 + curr[target - coins[ind]];

                // Store the minimum result in the dp array
                curr[target] = Math.min(notTake, take);
            }

            prev = curr;
        }

        int ans = prev[amount];

        if (ans >= (int) Math.pow(10, 9)){
            return -1;}
            
        return ans;
    }
}
