class Solution {
    public int longestStrChain(String[] words) {

        int n = words.length;
        int[] dp = new int[n];
        Arrays.fill(dp, 1);

        Arrays.sort(words, (a, b) -> Integer.compare(a.length(), b.length()));
        int max = 1;

        for (int i = 0; i < n; i++) {
            for (int prev = 0; prev < i; prev++) {
                if (compare(words[i], words[prev]) && 1 + dp[prev] > dp[i]) {
                    dp[i] = dp[prev] + 1;
                }
            }

            max = Math.max(max, dp[i]);
        }

        return max;

    }

    public static boolean compare(String s1, String s2) {
        if (s1.length() != s2.length() + 1) {
            return false;
        }
        int i = 0, j = 0;
        while (i < s1.length()) {
            if (j < s2.length() && s1.charAt(i) == s2.charAt(j)) {
                i++;
                j++;
            } else {
                i++;
            }
        }
        if (i == s1.length() && j == s2.length()) {
            return true;
        }
        return false;
    }
}
