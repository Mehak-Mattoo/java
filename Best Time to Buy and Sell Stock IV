class Solution {
    public int maxProfit(int k, int[] prices) {
        
  int n = prices.length;
        int[][][] dp = new int[n][2][k+1];

        // Initialize the dp array with -1
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 2; j++) {
                Arrays.fill(dp[i][j], -1);
            }
        }

        return helper(0, k, n, prices, 0, dp);
    }

    public static int helper(int i, int k, int n, int[] prices, int flag, int[][][] dp) {
        if (i >= n || k == 0) {
            return 0;
        }

        if (dp[i][flag][k] != -1) {
            return dp[i][flag][k];
        }

        int profit;

        if (flag == 0) {
            profit = Math.max(-prices[i] + helper(i + 1, k , n, prices, 1, dp),
                               helper(i + 1, k, n, prices, 0, dp));
        } else {
            profit = Math.max(prices[i] + helper(i + 1, k-1, n, prices, 0, dp),
                               helper(i + 1, k, n, prices, 1, dp));
        }
        return dp[i][flag][k] = profit;
    }
}




class Solution {
    public int maxProfit(int k, int[] prices) {

        int n = prices.length, profit = 0;
        int[][][] dp = new int[n + 1][2][k + 1];


        // Loop through the dp array, starting from the second last stock (ind=n-1)
        for (int ind = n - 1; ind >= 0; ind--) {
            for (int buy = 0; buy <= 1; buy++) {
                for (int cap = 1; cap <= k; cap++) {

                    if (buy == 0) { // We can buy the stock
                        profit = Math.max(0 + dp[ind + 1][0][cap],
                                -prices[ind] + dp[ind + 1][1][cap]);
                    }

                    if (buy == 1) { // We can sell the stock
                        profit = Math.max(0 + dp[ind + 1][1][cap],
                                prices[ind] + dp[ind + 1][0][cap - 1]);
                    }
                    dp[ind][buy][cap] = profit;
                }
            }
        }

        // The maximum profit with 2 transactions is stored in dp[0][0][2]
        return dp[0][0][k];
    }
}



class Solution {
    public int maxProfit(int k, int[] prices) {

        int n = prices.length, profit = 0;
        int [] []prev= new int[2][k+1];

        // Loop through the dp array, starting from the second last stock (ind=n-1)
        for (int ind = n - 1; ind >= 0; ind--) {
            int [][]curr= new int[2][k+1];
            for (int buy = 0; buy <= 1; buy++) {
                for (int cap = 1; cap <= k; cap++) {

                    if (buy == 0) { // We can buy the stock
                       profit = Math.max(0 + prev[0][cap],
                                -prices[ind] + prev[1][cap]);
                    }

                    else { // We can sell the stock
                        profit= Math.max(0 + prev[1][cap],
                                prices[ind] + prev[0][cap - 1]);
                    }
                     curr[buy][cap]= profit;
                }
            }
            prev= curr;
        }

      
        return prev[0][k];
    
    }
}
