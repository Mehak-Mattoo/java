public class Solution {
    public static String graphColoring(int[][] mat, int m) {
        int[] colors = new int[mat.length];
        return helper(0, mat.length, mat, colors, m) ? "YES" : "NO";
    }

    public static boolean helper(int node, int n, int[][] mat, int[] colors, int m) {
        if (node == n) {
            return true;
        }

        for (int color = 1; color <= m; color++) {
            if (canColor(node, color, mat, colors)) { // if we can color with current color
                colors[node] = color; // color it
                if (helper(node + 1, n, mat, colors, m)) {
                    return true; // If coloring succeeds for the rest of the graph, return true
                }
                colors[node] = 0; // Backtrack
            }
        }

        return false; // No valid coloring found
    }

 public static boolean canColor(int node, int currColor, int[][] mat, int[] colors) {
    for (int neighbor : mat[node]) {
        if (neighbor == 1 && colors[neighbor] == currColor) { // check if there is a edge b/w node and neighbour
            return false; // & its color should be diff from curr color 
        }
    }
    return true;
}

}
