class Solution {
    public int maxProfit(int[] prices) {

        int n = prices.length;
        int[][] dp = new int[n][2];

        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }

        return helper(0, n, prices, 0, dp);
    }

    public static int helper(int i, int n, int[] prices, int flag, int[][] dp) {

        if (i >= n) {
            return 0;
        }

        if (dp[i][flag] != -1) {
            return dp[i][flag];
        }

        int profit;

        if (flag == 0) {
            profit = Math.max(-prices[i] + helper(i + 1, n, prices, 1, dp), helper(i + 1, n, prices, 0, dp));
        }

        else {
            profit = Math.max(prices[i] + helper(i + 2, n, prices, 0, dp), helper(i + 1, n, prices, 1, dp));

        }
        return dp[i][flag] = profit;
    }
}





class Solution {
    public int maxProfit(int[] prices) {

        int n = prices.length;

        int dp[][] = new int[n + 2][2];

        // Iterate through the array backwards
        for (int ind = n - 1; ind >= 0; ind--) {
            for (int buy = 0; buy <= 1; buy++) {
                int profit = 0;

                if (buy == 0) { // We can buy the stock
                    profit = Math.max(0 + dp[ind + 1][0], -prices[ind] + dp[ind + 1][1]);
                }

                if (buy == 1) { // We can sell the stock
                    profit = Math.max(0 + dp[ind + 1][1], prices[ind] + dp[ind + 2][0]);
                }

                dp[ind][buy] = profit;
            }
        }

        // The maximum profit is stored in dp[0][0]
        return dp[0][0];

    }

}
