import java.util.*;

public class Solution {
    public static int longestBitonicSequence(int[] nums, int n) {
         int[] dp1 = new int[n];
        int[] dp2 = new int[n];

        // Initialize both arrays with 1, as each element itself is a subsequence of length 1
        Arrays.fill(dp1, 1);
        Arrays.fill(dp2, 1);

      
      

        for (int i = 0; i < n; i++) {
            for (int prev = 0; prev < i; prev++) {
                 if (nums[prev] < nums[i]) {
                    dp1[i] = Math.max(dp1[i], 1 + dp1[prev]);
                }
            }

          
        }
        
          for (int i = n-1; i >=0 ; i--) {
            for (int prev = n-1; prev >i; prev--) {
                 if (nums[prev] < nums[i]) {
                    dp2[i] = Math.max(dp2[i], 1 + dp2[prev]);
                }
            }
        }
        
          int max = 0;
          
          for(int i=0;i<n;i++){
              max= Math.max(max, dp1[i]+ dp2[i]-1);
          }
          
          return max;
    }
}
