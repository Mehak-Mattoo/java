class Solution {
    public int tribonacci(int n) {


        if(n==0){
            return 0;
        }

        if(n==1||n==2){
            return 1;
        }

       

        return tribonacci(n-1)+ tribonacci(n-2)+tribonacci(n-3);
        
    }
}// gives TLE


class Solution {
    public int tribonacci(int n) {
        Map<Integer, Integer> map= new HashMap<>(); // hashmap helps in getting precalculated values
        return helper(n, map);
    }
    
    public int helper(int n, Map<Integer, Integer> map) {
      
        if (map.containsKey(n)) {
            return map.get(n);
        }
        
        int result;

        if (n == 0) {
            result = 0;
        } else if (n == 1 || n == 2) {
            result = 1;
        } else {
            result = helper(n - 1, map) + helper(n - 2, map) + helper(n - 3, map);
        }
        
        map.put(n, result);
        return result;
    }
}
