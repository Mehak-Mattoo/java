import java.util.*;
public class Solution {
    static class Pair{
        int node;
        int ways;

        public Pair(int node, int ways){
            this.node= node;
             this.ways= ways;
        }
    }
    public static int minimumOperations(int n, int start, int end, int[] a) {

        if(start==end){
            return 0;
        }
       
        int mod = 1000;
        Queue<Pair> q = new LinkedList<>(); 
        int [] dist = new int[1000];
        dist[start]=0;

        Arrays.fill(dist, 1000);

        q.offer(new Pair(start, 0));

        while(!q.isEmpty()){
            Pair curr= q.poll();
            int src= curr.node;
            int ways= curr.ways;

            for (int i = 0; i < n; i++) {
                int num = (a[i]* src)% mod;

                if(num==end){
                    return ways+1;
                }

               if(ways+1< dist[num]){
                   dist[num]= ways+1;
                   q.add(new Pair(num, ways+1));
               }
                
            }
        }

return -1;


    }
}
