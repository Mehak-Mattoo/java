class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {

   Set<List<Integer>> set = new HashSet<>();

    for(int i = 0 ; i<nums.length; i++){
    
  for(int j = i+1 ; j<nums.length; j++){
       for(int k = j+1 ; k<nums.length; k++){
            for(int l = k+1 ; l<nums.length; l++){   
    
  long sum = (long)nums[i] + nums[j];
   sum += nums[k];
  sum += nums[l];

       if (sum == target) {
   List<Integer> temp = Arrays.asList(nums[i], nums[j], nums[k], nums[l]);
 Collections.sort(temp);
set.add(temp);}



}}}
    }
  List<List<Integer>> ans = new ArrayList<>(set);
        return ans;
    }

    }






class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {

   Set<List<Integer>> set = new HashSet<>();// to avoid duplicates

    for(int i = 0 ; i<nums.length; i++){
    
  for(int j = i+1 ; j<nums.length; j++){

   Set<Long> hashset = new HashSet<>();// putting everything between j and k into set to make sure all elements are distinct
    for(int k = j+1 ; k<nums.length; k++){
          
    
  long sum = (long)nums[i] + nums[j];
   sum += nums[k];

 long fourth = target - sum; 

 if (hashset.contains(fourth)) {  // finding 4th element in set
 List<Integer> temp = new ArrayList<>();

  temp.add(nums[i]);
    temp.add(nums[j]);
   temp.add(nums[k]);
    temp.add((int) fourth);class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
 Arrays.sort(nums);
  int n = nums.length;

    List<List<Integer>> ans = new ArrayList<>();

    for(int i = 0 ; i<nums.length; i++){
   if (i > 0 && nums[i] == nums[i - 1]) continue;// if duplicate is found, go ahead

  for(int j = i+1 ; j<nums.length; j++){
   if (j > i + 1 && nums[j] == nums[j - 1]) continue;

  int k = j + 1;
    int l = n - 1;
          
 while (k < l) {
   long sum = nums[i];
    sum += nums[j];
    sum += nums[k];
 sum += nums[l];


 if (sum == target) {
  List<Integer> temp = new ArrayList<>();
     temp.add(nums[i]);
  temp.add(nums[j]);
  temp.add(nums[k]);
temp.add(nums[l]);


 ans.add(temp);
  k++;
 l--;    
 

 while (k < l && nums[k] == nums[k - 1]) k++;  // skip duplicates
  while (k < l && nums[l] == nums[l + 1]) l--;
    }
    
     else if (sum < target){
 k++;  }


    else{ 
      l--;
      }
 }}}

        return ans;
    }

    }

    temp.sort(Integer::compareTo);// sorting
     set.add(temp);

}
  hashset.add((long) nums[k]);
}
    }}
  List<List<Integer>> ans = new ArrayList<>(set);
        return ans;
    }

    }




    
