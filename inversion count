import java.util.ArrayList;
public class Solution {

 public static int mergeSort(int[] arr, int l, int r){
 
 int count=0;

if(l>= r){
    return count;}

 int mid= (l+r)/2;   

count+= mergeSort(arr, l, mid);
count+= mergeSort(arr, mid+1, r);
count+= merge(arr, l, mid, r);

return count; }


public static int merge (int []arr, int low, int mid, int high){

 ArrayList<Integer> temp = new ArrayList<>(); 

 int right= mid+1, left= low, count=0;

 while (left<= mid && right<= high){
     if(arr[left]<= arr[right]){
         temp.add(arr[left]);
         left++;}
     
     else{
         temp.add(arr[right]);
count+= (mid-left+1);
         right++;}}


 while(left<=mid){
     temp.add(arr[left++]);}
 
  while(right <= high){
    temp.add(arr[right++]);}

for(int i= low; i<=high; i++){
    arr[i]= temp.get(i-low); }
    
    return count;}




    public static int numberOfInversions(int []a, int n) {
        return mergeSort(a, 0, n-1);
 
    }
}
