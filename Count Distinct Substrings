import java.util.*;

public class Solution {

    public static int countDistinctSubstrings(String s) {
        int n = s.length();
        Set<String> set = new HashSet<>();
     

     for (int i = 0; i < n; i++) {
        StringBuilder str= new StringBuilder();

        for (int j = i; j < n; j++) {
            str.append(s.charAt(j));

            set.add(str.toString());
            
        } 
     }

     return set.size()+1; // for empty string
    }


}








import java.util.*;

class Node {
    Node links[] = new Node[26];
    boolean flag = false;

    // Check if the node contains a specific character
    boolean containsKey(char c) {
        return links[c - 'a'] != null;
    }

    // Put a new node for a specific character
    void put(char c, Node node) {
        links[c - 'a'] = node;
    }

    // Get the node for a specific character
    Node get(char c) {
        return links[c - 'a'];
    }

    // Mark the end of a word
    void setEnd() {
        flag = true;
    }

    // Check if the node is the end of a word
    boolean hasEnd() {
        return flag;
    }
}

class Trie {
    Node root;

    public Trie() {
        root = new Node();
    }

    public void insert(String word) {
        Node node = root;
        for (int i = 0; i < word.length(); i++) {
            char currentChar = word.charAt(i);
            if (!node.containsKey(currentChar)) {
                node.put(currentChar, new Node());
            }
            node = node.get(currentChar);
        }
        node.setEnd(); // Mark the end of the word
    }

    public boolean search(String word) {
        Node node = root;
        for (int i = 0; i < word.length(); i++) {
            char currentChar = word.charAt(i);
            if (!node.containsKey(currentChar)) {
                return false; // If the character is not found, return false
            }
            node = node.get(currentChar);
        }
        return node.hasEnd(); // Return true if the end of the word is reached
    }
}


public class Solution {

    public static int countDistinctSubstrings(String s) {
        int n = s.length();
        Set<String> set = new HashSet<>();
     
     Node root = new Node();  
   int count=0;

   for (int i = 0; i < n; i++) {
         Node node = root;  
       for (int j = i; j < n; j++) {// create a trie for ever char in s

           if(!node.containsKey(s.charAt(j))){
               node.put(s.charAt(j), new Node()); // create a new trie

               count++;
           }

             node = node.get(s.charAt(j));   // move to next


           
       }
   }

   return count+1;
    }


}
