package com.java.MyProject;
import java.util.*;


public class PasswordGenerator {
public static void main(String[] args) {
	
		
String password  = 	generateSecurePassword(8,16);  // generates a password between 8-16 characters
System.out.println(password);
System.out.println("Length: "+ password.length());  // displays length

int score = generatePasswordStrength(password);  // displays strength of password




if( score == 1) {
	System.out.println("Password Strength: VERY WEAK");}

else if(score <= 2){
	System.out.println("Password Strength: WEAK"); }

else if(score <= 3 ){
	System.out.println("Password Strength: MEDIUM"); }

else if(score <= 4) {
	System.out.println("Password Strength: STRONG");}

else if(score >= 5) {
	System.out.println("Password Strength: VERY STRONG");}}




private static int generatePasswordStrength(String password) {
	
	int strength = 0;
	
	if(password.length()>= 8) {
		strength += 1;}
	
	else if (password.length() <=10 || password.length()<= 12  ) {
		strength += 2;	}
	
    else if(password.length() == 16 ) {
    	strength += 3 ; }
	
	
    if(password.matches("(?=.*[A-Z]).*")) {  // if password has upper case letters
	 strength++;}
 
   if(password.matches("(?=.*[a-z]).*")) {  // if password has  lower case letters
	 strength++;}
 
   if(password.matches("(?=.*[0-9]).*")) { //  // if password has numbers
	 strength++;}
 
  if (password.matches("(?=.*[!@#$%^&*]).*")) {  //  // if password has characters
	 strength++; }
	
	
return strength; }




public static String generateSecurePassword(int minimum, int maximum) {
	
	String password = "";

	Random r= new Random();
		
	String lowerCase  = "abcdefghijklmnopqrstuvwxyz";
	String upperCase=   "ABCDEFGHIJKLMNOPQRSTUVWXYZ"  ;
	String numbers = "0123456789";
   String specialCharacters = "<>:?/!@#$)[](^*";
	
	String add= lowerCase+ upperCase + numbers + specialCharacters;
	
	List<Character>list =new ArrayList<>();
	
	
	for (char i : add.toCharArray()) {  // put all characters into array list
	list.add(i);}
			
	Collections.shuffle(list);  // shuffle to create randomness
	
	
	for (int i =0; i <= r.nextInt(minimum,maximum);i++) {  // chooses between min. and max length
	password += list.get(i);}
	
	return password;  
	
}}
