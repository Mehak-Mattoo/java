import java.io.*;
import java.util.* ;

import java.util.ArrayList;

public class Solution {

	public static int LongestSubsetWithZeroSum(ArrayList<Integer> arr) {

int longest=0;
	
for (int i = 0; i < arr.size(); i++) {
	int sum=0;
for (int j = i; j < arr.size(); j++) {
	
sum+=arr.get(j);

if(sum==0){

longest= Math.max(longest, j-i+1);  // returns length b/w 2 eleements

		}}}
	return longest;
	
		}
}



import java.io.*;
import java.util.* ;

import java.util.ArrayList;

public class Solution {

	public static int LongestSubsetWithZeroSum(ArrayList<Integer> arr) {

int longest=0, sum=0;
HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();	
for (int i = 0; i < arr.size(); i++) {

sum+=arr.get(i);
if(sum==0){
	longest= i+1; // length will always be +1
}
	
else if (map.get(sum)!= null){  // if map has that sum already
	longest= Math.max(longest, i-map.get(sum));// get the max out of longest and curent index- that value index
}

else{
	map.put(sum, i); // if its first time , map them
}}


	return longest;
	
		}
}
