/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

class Pair { // class to store indexes of all nodes of tree

    TreeNode node;
    int i;

    public Pair(TreeNode node, int i) {

        this.node = node;
        this.i = i;
    }
}

class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        Queue<Pair> q = new LinkedList<>();
        int ans = 0;

        if (root == null) {
            return 0;
        }

        q.offer(new Pair(root, 0));

        while (!q.isEmpty()) {
            int size = q.size();
            int min = q.peek().i; // taking the min index at each level

            int first = 0, last = 0;

            for (int i = 0; i < size; i++) {

                int currId = q.peek().i - min; // to make the index as small as possible

                TreeNode curr = q.peek().node;
                q.poll();

                if (i == 0) {
                    first = currId;
                }
                if (i == size - 1) {
                    last = currId;
                }

                if (curr.left != null) {
                    q.offer(new Pair(curr.left, currId * 2 + 1));
                }

                if (curr.right != null) {
                    q.offer(new Pair(curr.right, currId * 2 + 2));
                }

            }
            ans = Math.max(ans, last - first+1);  // width

        }
        return ans;
    }
}
