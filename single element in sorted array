class Solution {
    public int singleNonDuplicate(int[] nums) {

        if( nums.length==1){
            return nums[0];}

            // edge cases: to keep low and high at 1 & n-2
       
        if(nums[0]!= nums[1]){
            return nums[0];}
         
        if(nums[nums.length-1]!= nums[nums.length-2]){
            return nums[nums.length-1];}

             int low=1, high= nums.length-2;


         while(low<=high){
             int mid= (high+low)/2;

//single element = elemnt adjacent to it must not be equal
            if(nums[mid]!= nums[mid-1] && nums[mid]!= nums[mid+1]){
                 return nums[mid];}

// we are in left half--> element is in right half
            if(mid%2 ==1 && nums[mid]== nums[mid-1] || mid %2==0 && nums[mid] ==  nums   [mid+1] ){
            low= mid+1; }
            else{
                high= mid-1;}
            
             
         } return -1;  
        

    
    }
}
