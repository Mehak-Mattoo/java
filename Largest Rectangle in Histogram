class Solution {
    public int largestRectangleArea(int[] heights) {

        int n = heights.length;
        int maxHeight = 0;

        for (int i = 0; i < n; i++) {
            int min = heights[i];

            for (int j = i; j < n; j++) {

                min = Math.min(heights[j], min); // the largest area will be formed b/w min *width

                int width = j - i + 1; // width b/w rectangle
                int area = min * width;
                maxHeight = Math.max(maxHeight, area);

            }
        }
        return maxHeight;

    }
}


class Solution {
    class Pair {
        int index;
        int height;

        public Pair(int index, int height) {
            this.index = index;
            this.height = height;
        }
    }

    public int largestRectangleArea(int[] heights) {

        int n = heights.length;
        int maxHeight = 0;

        Stack<Pair> stack = new Stack<>();

        for (int i = 0; i <= n; i++) {
            int curr = (i == n) ? 0 : heights[i]; // when elements still remain in stack, to get them inside the below code

            while (!stack.isEmpty() && stack.peek().height > curr) {
                Pair popped = stack.pop();

                int width = (stack.isEmpty()) ? i : i - stack.peek().index - 1; 
                int area = popped.height * width;
                maxHeight = Math.max(maxHeight, area);
            }

            stack.push(new Pair(i, curr));

        }
        return maxHeight;

    }
}
