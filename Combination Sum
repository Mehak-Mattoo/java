class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {

        List<List<Integer>> big = new ArrayList<>();
        helper(0,target,candidates.length, candidates, new ArrayList<>(), big  );

        return big;

    }

    public static void helper(int i, int target, int n, int[] candidates, List<Integer> small,
            List<List<Integer>> big) {

        if (i == n) {
            if (target == 0) {
                big.add(new ArrayList<>(small));
            }
            return;
        }
        if (candidates[i] <= target) {
            small.add(candidates[i]);
            helper(i, target - candidates[i], n, candidates, small, big);
            small.remove(small.size() - 1);

        }
        helper(i + 1, target, n, candidates, small, big);

    }
}
