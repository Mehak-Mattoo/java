class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {

        int n = candidates.length;
        List<List<Integer>> list = new ArrayList<>();
        List<Integer> insideList = new ArrayList<>();

        helper(0, target, n, candidates, insideList, list);

        return list;

    }

    public static void helper(int i, int target, int n, int[] arr, List<Integer> insideList, List<List<Integer>> list) {

        if (i == n) {
            return;
        }

        if (target == 0) {// we found a match
            list.add(new ArrayList<>(insideList));
            return;
        }

        if (arr[i] <= target) {// when we can still pick up a element yo make up the target
            insideList.add(arr[i]);
            helper(i, target - arr[i], n, arr, insideList, list); // picking the same index multiple times && updating the target+ curr element
            insideList.remove(insideList.size() - 1);
        }

        helper(i + 1, target, n, arr, insideList, list);// not taking curr index

    }
}
