class Solution {
    public int lengthOfLIS(int[] nums) {

        int n = nums.length;
        int[][] dp = new int[n + 1][n]; 

        return helper(-1, 0, nums, dp);
    }

    public static int helper(int prevIndex, int currIndex, int[] nums, int[][] dp) {
        if (currIndex == nums.length) {
            return 0; // Base case: end of array reached, return 0
        }

        if (dp[prevIndex + 1][currIndex] != 0) {
            return dp[prevIndex + 1][currIndex];
        }

        int take = 0;

        // If the current element can be included in the LIS
        if (prevIndex == -1 || nums[currIndex] > nums[prevIndex]) {
            take = 1 + helper(currIndex, currIndex + 1, nums, dp);
        }

  
        int notTake = helper(prevIndex, currIndex + 1, nums, dp);


        return dp[prevIndex + 1][currIndex] = Math.max(take, notTake);
    }
}






class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length, ans = 1;

        int[] dp = new int[n];
        Arrays.fill(dp, 1);
        int max = 1;

        for (int i = 0; i < n; i++) {

            for (int prev = 0; prev < i; prev++) {
                if (nums[prev] < nums[i]) {
                    dp[i] = Math.max(dp[i], 1 + dp[prev]);
                }

            }

            max = Math.max(max, dp[i]);
        }

        return max;
    }
}







class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length, ans = 1;

        List<Integer> list = new ArrayList<>();

        list.add(nums[0]);

        for (int i = 1; i < n; i++) {
            if (nums[i] > list.get(list.size() - 1)) { // keep on putting when increasing subseq. found
                list.add(nums[i]);
                ans++;
            } else {
                int ind = Collections.binarySearch(list, nums[i]); // else do a BS to correctly put the smaller element

                if (ind < 0) {// if nums[i] is not present in list, the binarySearch method returns - val, negate ind to get the correct insertion point.
                    ind = -ind - 1;
                }

                list.set(ind, nums[i]);
            }
        }

        return ans;
    }
}
