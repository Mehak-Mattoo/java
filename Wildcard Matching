public class Solution {
    public boolean isMatch(String s, String p) {
        int n = s.length(), m = p.length();
        int[][] dp = new int[n + 1][m + 1];
        return helper(n, m, s, p, dp) == 1;
    }

    public int helper(int i, int j, String s, String p, int[][] dp) {
        if (i == 0 && j == 0) {
            return 1;
        }
        if (i == 0 && p.charAt(j - 1) == '*') {
            return helper(i, j - 1, s, p, dp);
        }
        if (i == 0 || j == 0) {
            return 0;
        }
        if (dp[i][j] != 0) {
            return dp[i][j];
        }
        if (s.charAt(i - 1) == p.charAt(j - 1) || p.charAt(j - 1) == '?') {
            return dp[i][j] = helper(i - 1, j - 1, s, p, dp);
        }
        if (p.charAt(j - 1) == '*') {
            return dp[i][j] = (helper(i - 1, j, s, p, dp) == 1 || helper(i, j - 1, s, p, dp) == 1) ? 1 : 0;
        }
        return 0;
    }
}




public class Solution {
    public boolean isMatch(String s, String p) {
        int n = s.length(), m = p.length();
        boolean[][] dp = new boolean[n + 1][m + 1];

        dp[0][0] = true;

        // Initialize the first row (matching an empty string with pattern)
        for (int j = 1; j <= m; j++) {
            if (p.charAt(j - 1) == '*') {
                dp[0][j] = dp[0][j - 1];
            }
        }

        // Dynamic Programming
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (p.charAt(j - 1) == '*') {
                    // If '*' matches 0 characters or 1 or more characters
                    dp[i][j] = dp[i][j - 1] || dp[i - 1][j];
                } else if (p.charAt(j - 1) == '?' || s.charAt(i - 1) == p.charAt(j - 1)) {
                    // If characters match or '?' is encountered
                    dp[i][j] = dp[i - 1][j - 1];
                }
            }
        }

        return dp[n][m];
    }
}




public class Solution {
    public boolean isMatch(String s, String p) {
        int n = s.length(), m = p.length();

        boolean []prev = new boolean [m+1];

        prev[0] = true;


        // Initialize the first row (matching an empty string with pattern)
        for (int j = 1; j <= m; j++) {
            if (p.charAt(j - 1) == '*') {
                prev[j] = prev[j - 1];
            }
        }

       
        for (int i = 1; i <= n; i++) {
             boolean [] curr = new boolean [m+1];

            for (int j = 1; j <= m; j++) {
                 if (p.charAt(j - 1) == '?' || s.charAt(i - 1) == p.charAt(j - 1)) {
                    // If characters match or '?' is encountered
                    curr[j] = prev[j - 1];
                }

                else if (p.charAt(j - 1) == '*') {
                    // If '*' matches 0 characters or 1 or more characters
                    curr[j] = curr[j - 1] || prev[j];
                }
            }
            prev= curr;
        }

        return prev[m];
    }
}
