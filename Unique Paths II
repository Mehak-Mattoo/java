class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {

        int n = obstacleGrid.length, m = obstacleGrid[0].length;
        int[][] dp = new int[n][m];

       

        // if (n == 1 && obstacleGrid[0][0] == 1) {
        //     return 0;
        // }
        // if (n == 1 && obstacleGrid[0][0] == 0) {
        //     return 1;
        // }

        //   if( obstacleGrid[n-1][m-1]==1){
        //     return 0;
        // }

       

        return helper(n- 1 ,m - 1, obstacleGrid, dp);
    }

    public static int helper(int r, int c, int[][] grid, int[][] dp) {

  int n = grid.length, m = grid[0].length;
        if( r < 0 || c < 0 || grid[r][c] == 1)
            return 0;
        if(dp[r][c] != 0)
            return dp[r][c];
        if(r == 0 && c == 0){
            return 1;
        }
  
        int cost = 0;
        int a = helper(r,c-1,grid, dp);
        int b = helper (r-1,c,grid, dp);
        cost+=a+b;
        return dp[r][c] = cost;
    }
}



class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {

        int n = obstacleGrid.length, m = obstacleGrid[0].length;
        int[][] dp = new int[n][m];

        if(obstacleGrid[n-1][m-1]==1 || obstacleGrid[0][0]==1){
            return 0;
        }

        dp[0][0] = 1;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {

                if (i == 0 && j == 0) {
                    continue;
                }

                if (obstacleGrid[i][j] == 1) {
                    dp[i][j] = 0;
                    continue;
                }

                int right = 0, down = 0;

                if (i > 0) {
                    right = dp[i - 1][j];
                }

                if (j > 0) {
                    down = dp[i][j - 1];
                }

                dp[i][j] = right + down;
            }

        }

        return dp[n - 1][m - 1];

    }
}




class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {

        int n = obstacleGrid.length, m = obstacleGrid[0].length;

        int[] prev = new int[m];

        if (obstacleGrid[n - 1][m - 1] == 1 || obstacleGrid[0][0] == 1) { // if start or end is blocked
            return 0;
        }

        for (int i = 0; i < n; i++) {
            int temp[] = new int[m];

            for (int j = 0; j < m; j++) {

                if (i == 0 && j == 0) {
                    temp[j] = 1;
                    continue;
                }

                if (obstacleGrid[i][j] == 1) {
                    temp[j] = 0;
                    continue;
                }

                int right = 0, down = 0;

                if (i > 0) {
                    right = prev[j];
                }

                if (j > 0) {
                    down = temp[j - 1];
                }

                temp[j] = right + down;
            }
            prev = temp;

        }

        return prev[m - 1];
    }
}
